
atividade-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006c84  08006c84  00007c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dfc  08006dfc  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e04  08006e04  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006e0c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  20000064  08006e70  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c88  08006e70  00008c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ce8  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359a  00000000  00000000  00020d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00024318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001016  00000000  00000000  000257c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038bd  00000000  00000000  000267de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017902  00000000  00000000  0002a09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb72  00000000  00000000  0004199d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d50f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c08  00000000  00000000  0011d554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c6c 	.word	0x08006c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08006c6c 	.word	0x08006c6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbd2 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f83e 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8d8 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8ac 	bl	8000748 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f002 fc0c 	bl	8002e0c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex */
  myMutexHandle = osMutexNew(&myMutex_attributes);
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0x5c>)
 80005f6:	f002 fd20 	bl	800303a <osMutexNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <main+0x60>)
 80005fe:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000600:	4a0f      	ldr	r2, [pc, #60]	@ (8000640 <main+0x64>)
 8000602:	2100      	movs	r1, #0
 8000604:	480f      	ldr	r0, [pc, #60]	@ (8000644 <main+0x68>)
 8000606:	f002 fc60 	bl	8002eca <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <main+0x6c>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000610:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <main+0x70>)
 8000612:	2100      	movs	r1, #0
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <main+0x74>)
 8000616:	f002 fc58 	bl	8002eca <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <main+0x78>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <main+0x7c>)
 8000622:	2100      	movs	r1, #0
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <main+0x80>)
 8000626:	f002 fc50 	bl	8002eca <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <main+0x84>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f002 fc10 	bl	8002e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x58>
 8000638:	08006da0 	.word	0x08006da0
 800063c:	200000d4 	.word	0x200000d4
 8000640:	08006d34 	.word	0x08006d34
 8000644:	08000879 	.word	0x08000879
 8000648:	200000c8 	.word	0x200000c8
 800064c:	08006d58 	.word	0x08006d58
 8000650:	080008d1 	.word	0x080008d1
 8000654:	200000cc 	.word	0x200000cc
 8000658:	08006d7c 	.word	0x08006d7c
 800065c:	08000991 	.word	0x08000991
 8000660:	200000d0 	.word	0x200000d0

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fe1e 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <SystemClock_Config+0xdc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <SystemClock_Config+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a25      	ldr	r2, [pc, #148]	@ (8000744 <SystemClock_Config+0xe0>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d8:	23b4      	movs	r3, #180	@ 0xb4
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fa03 	bl	8001af8 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 f9b7 	bl	8000a6a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fc:	f000 fe30 	bl	8001360 <HAL_PWREx_EnableOverDrive>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 f9b0 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe69 	bl	8001400 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000734:	f000 f999 	bl	8000a6a <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f001 fef4 	bl	800256c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f96e 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000080 	.word	0x20000080
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a25      	ldr	r2, [pc, #148]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	@ (800086c <MX_GPIO_Init+0xd0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2121      	movs	r1, #33	@ 0x21
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fd66 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	@ (8000874 <MX_GPIO_Init+0xd8>)
 8000844:	f000 fbc4 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000848:	2321      	movs	r3, #33	@ 0x21
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_GPIO_Init+0xd4>)
 8000860:	f000 fbb6 	bl	8000fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800

08000878 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if ((osMutexAcquire(myMutexHandle, osWaitForever) == osOK)) {
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <StartTask01+0x48>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fc5c 	bl	8003146 <osMutexAcquire>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10f      	bne.n	80008b4 <StartTask01+0x3c>
			donoMutex = osThreadGetId();
 8000894:	f002 fbab 	bl	8002fee <osThreadGetId>
 8000898:	4603      	mov	r3, r0
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <StartTask01+0x4c>)
 800089c:	6013      	str	r3, [r2, #0]

			HAL_UART_Transmit(&huart2, (uint8_t*) "task01: usando a serial\n",
 800089e:	230a      	movs	r3, #10
 80008a0:	2218      	movs	r2, #24
 80008a2:	4909      	ldr	r1, [pc, #36]	@ (80008c8 <StartTask01+0x50>)
 80008a4:	4809      	ldr	r0, [pc, #36]	@ (80008cc <StartTask01+0x54>)
 80008a6:	f001 feb1 	bl	800260c <HAL_UART_Transmit>
					strlen("task01: usando a serial\n"), 10);

			osMutexRelease(myMutexHandle);
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <StartTask01+0x48>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fc94 	bl	80031dc <osMutexRelease>
		}

		osDelay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f002 fba4 	bl	8003004 <osDelay>
		if ((osMutexAcquire(myMutexHandle, osWaitForever) == osOK)) {
 80008bc:	e7e0      	b.n	8000880 <StartTask01+0x8>
 80008be:	bf00      	nop
 80008c0:	200000d4 	.word	0x200000d4
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	08006ca4 	.word	0x08006ca4
 80008cc:	20000080 	.word	0x20000080

080008d0 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		if ((osMutexAcquire(myMutexHandle, 0) == osOK)
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <StartTask02+0x9c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fc31 	bl	8003146 <osMutexAcquire>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <StartTask02+0x26>
				|| donoMutex == Task02Handle) {
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <StartTask02+0xa0>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <StartTask02+0xa4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d135      	bne.n	8000962 <StartTask02+0x92>

			donoMutex = osThreadGetId();
 80008f6:	f002 fb7a 	bl	8002fee <osThreadGetId>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <StartTask02+0xa0>)
 80008fe:	6013      	str	r3, [r2, #0]

			int len = snprintf(buffer, sizeof(buffer),
					"task02 - ciclo atual: %d\n", ciclo_atual++);
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <StartTask02+0xa8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	b2d1      	uxtb	r1, r2
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <StartTask02+0xa8>)
 800090a:	7011      	strb	r1, [r2, #0]
			int len = snprintf(buffer, sizeof(buffer),
 800090c:	4a1b      	ldr	r2, [pc, #108]	@ (800097c <StartTask02+0xac>)
 800090e:	211e      	movs	r1, #30
 8000910:	481b      	ldr	r0, [pc, #108]	@ (8000980 <StartTask02+0xb0>)
 8000912:	f005 fc99 	bl	8006248 <sniprintf>
 8000916:	60f8      	str	r0, [r7, #12]

			HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, 10);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	b29a      	uxth	r2, r3
 800091c:	230a      	movs	r3, #10
 800091e:	4918      	ldr	r1, [pc, #96]	@ (8000980 <StartTask02+0xb0>)
 8000920:	4818      	ldr	r0, [pc, #96]	@ (8000984 <StartTask02+0xb4>)
 8000922:	f001 fe73 	bl	800260c <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000926:	2120      	movs	r1, #32
 8000928:	4817      	ldr	r0, [pc, #92]	@ (8000988 <StartTask02+0xb8>)
 800092a:	f000 fcfe 	bl	800132a <HAL_GPIO_TogglePin>
			osDelay(500);
 800092e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000932:	f002 fb67 	bl	8003004 <osDelay>

			if (ciclo_atual > 3) {
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <StartTask02+0xa8>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d90d      	bls.n	800095a <StartTask02+0x8a>
				ciclo_atual = 1;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <StartTask02+0xa8>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart2,
 8000944:	230a      	movs	r3, #10
 8000946:	221b      	movs	r2, #27
 8000948:	4910      	ldr	r1, [pc, #64]	@ (800098c <StartTask02+0xbc>)
 800094a:	480e      	ldr	r0, [pc, #56]	@ (8000984 <StartTask02+0xb4>)
 800094c:	f001 fe5e 	bl	800260c <HAL_UART_Transmit>
						(uint8_t*) "task02: liberando mutex...\n",
						strlen("task02: liberando mutex...\n"), 10);

				osMutexRelease(myMutexHandle);
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <StartTask02+0x9c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fc41 	bl	80031dc <osMutexRelease>
			}

			HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800095a:	2120      	movs	r1, #32
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <StartTask02+0xb8>)
 800095e:	f000 fce4 	bl	800132a <HAL_GPIO_TogglePin>
		}

		osDelay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000966:	f002 fb4d 	bl	8003004 <osDelay>
		if ((osMutexAcquire(myMutexHandle, 0) == osOK)
 800096a:	e7b5      	b.n	80008d8 <StartTask02+0x8>
 800096c:	200000d4 	.word	0x200000d4
 8000970:	200000d8 	.word	0x200000d8
 8000974:	200000cc 	.word	0x200000cc
 8000978:	20000000 	.word	0x20000000
 800097c:	08006cc0 	.word	0x08006cc0
 8000980:	200000dc 	.word	0x200000dc
 8000984:	20000080 	.word	0x20000080
 8000988:	40020000 	.word	0x40020000
 800098c:	08006cdc 	.word	0x08006cdc

08000990 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		for (;;) {
			tick_atual = osKernelGetTickCount();
 8000998:	f002 fa82 	bl	8002ea0 <osKernelGetTickCount>
 800099c:	4603      	mov	r3, r0
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <StartTask03+0x9c>)
 80009a0:	6013      	str	r3, [r2, #0]
			limit_time = tick_atual + 2000;
 80009a2:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <StartTask03+0x9c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80009aa:	4a21      	ldr	r2, [pc, #132]	@ (8000a30 <StartTask03+0xa0>)
 80009ac:	6013      	str	r3, [r2, #0]

			while ((osMutexAcquire(myMutexHandle, 0) != osOK)) {
 80009ae:	e01c      	b.n	80009ea <StartTask03+0x5a>
				tick_atual = osKernelGetTickCount();
 80009b0:	f002 fa76 	bl	8002ea0 <osKernelGetTickCount>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <StartTask03+0x9c>)
 80009b8:	6013      	str	r3, [r2, #0]

				if (tick_atual >= limit_time && !alert) {
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <StartTask03+0x9c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <StartTask03+0xa0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d311      	bcc.n	80009ea <StartTask03+0x5a>
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <StartTask03+0xa4>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10d      	bne.n	80009ea <StartTask03+0x5a>
					HAL_UART_Transmit(&huart2,
 80009ce:	230a      	movs	r3, #10
 80009d0:	2221      	movs	r2, #33	@ 0x21
 80009d2:	4919      	ldr	r1, [pc, #100]	@ (8000a38 <StartTask03+0xa8>)
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <StartTask03+0xac>)
 80009d6:	f001 fe19 	bl	800260c <HAL_UART_Transmit>
							(uint8_t*) "task03: tempo de espera excedido\n",
							strlen("task03: tempo de espera excedido\n"), 10);

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <StartTask03+0xb0>)
 80009e0:	f000 fc8a 	bl	80012f8 <HAL_GPIO_WritePin>

					alert = 1;
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <StartTask03+0xa4>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
			while ((osMutexAcquire(myMutexHandle, 0) != osOK)) {
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <StartTask03+0xb4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fba8 	bl	8003146 <osMutexAcquire>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1d9      	bne.n	80009b0 <StartTask03+0x20>
				}
			}

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2101      	movs	r1, #1
 8000a00:	480f      	ldr	r0, [pc, #60]	@ (8000a40 <StartTask03+0xb0>)
 8000a02:	f000 fc79 	bl	80012f8 <HAL_GPIO_WritePin>

			donoMutex = osThreadGetId();
 8000a06:	f002 faf2 	bl	8002fee <osThreadGetId>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <StartTask03+0xb8>)
 8000a0e:	6013      	str	r3, [r2, #0]

			osMutexRelease(myMutexHandle);
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <StartTask03+0xb4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fbe1 	bl	80031dc <osMutexRelease>

			alert = 0;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <StartTask03+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]

			osDelay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a24:	f002 faee 	bl	8003004 <osDelay>
			tick_atual = osKernelGetTickCount();
 8000a28:	e7b6      	b.n	8000998 <StartTask03+0x8>
 8000a2a:	bf00      	nop
 8000a2c:	200000fc 	.word	0x200000fc
 8000a30:	20000100 	.word	0x20000100
 8000a34:	20000104 	.word	0x20000104
 8000a38:	08006cf8 	.word	0x08006cf8
 8000a3c:	20000080 	.word	0x20000080
 8000a40:	40020000 	.word	0x40020000
 8000a44:	200000d4 	.word	0x200000d4
 8000a48:	200000d8 	.word	0x200000d8

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a5e:	f000 f9b5 	bl	8000dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6e:	b672      	cpsid	i
}
 8000a70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a72:	bf00      	nop
 8000a74:	e7fd      	b.n	8000a72 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a11      	ldr	r2, [pc, #68]	@ (8000acc <HAL_MspInit+0x54>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_MspInit+0x54>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_MspInit+0x54>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_MspInit+0x54>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	f06f 0001 	mvn.w	r0, #1
 8000abe:	f000 fa5d 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12b      	bne.n	8000b4a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_UART_MspInit+0x8c>)
 8000b46:	f000 fa43 	bl	8000fd0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <HAL_InitTick+0xe8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a33      	ldr	r2, [pc, #204]	@ (8000c48 <HAL_InitTick+0xe8>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <HAL_InitTick+0xe8>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fd4c 	bl	8001634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba6:	f000 fd1d 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8000baa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bae:	f000 fd19 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bba:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <HAL_InitTick+0xec>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bcc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bda:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000bee:	4818      	ldr	r0, [pc, #96]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000bf0:	f001 fa20 	bl	8002034 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d11b      	bne.n	8000c3a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c02:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <HAL_InitTick+0xf0>)
 8000c04:	f001 fa70 	bl	80020e8 <HAL_TIM_Base_Start_IT>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d111      	bne.n	8000c3a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c16:	201c      	movs	r0, #28
 8000c18:	f000 f9cc 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d808      	bhi.n	8000c34 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c22:	2200      	movs	r2, #0
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	201c      	movs	r0, #28
 8000c28:	f000 f9a8 	bl	8000f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2c:	4a09      	ldr	r2, [pc, #36]	@ (8000c54 <HAL_InitTick+0xf4>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e002      	b.n	8000c3a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3738      	adds	r7, #56	@ 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	20000108 	.word	0x20000108
 8000c54:	20000008 	.word	0x20000008

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <TIM2_IRQHandler+0x10>)
 8000c96:	f001 fa97 	bl	80021c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000108 	.word	0x20000108

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f005 fb54 	bl	8006380 <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20020000 	.word	0x20020000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	20000150 	.word	0x20000150
 8000d0c:	20004c88 	.word	0x20004c88

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d38:	f7ff ffea 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f005 fb13 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fc39 	bl	80005dc <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d78:	08006e0c 	.word	0x08006e0c
  ldr r2, =_sbss
 8000d7c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d80:	20004c88 	.word	0x20004c88

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8d8 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	200f      	movs	r0, #15
 8000db8:	f7ff fed2 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe5c 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000154 	.word	0x20000154

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000154 	.word	0x20000154

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8e:	f7ff ff61 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ffb1 	bl	8000f00 <NVIC_EncodePriority>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff80 	bl	8000eac <__NVIC_SetPriority>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff54 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e165      	b.n	80012b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8154 	bne.w	80012b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80ae 	beq.w	80012b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5d      	ldr	r3, [pc, #372]	@ (80012d0 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a5c      	ldr	r2, [pc, #368]	@ (80012d0 <HAL_GPIO_Init+0x300>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b5a      	ldr	r3, [pc, #360]	@ (80012d0 <HAL_GPIO_Init+0x300>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a58      	ldr	r2, [pc, #352]	@ (80012d4 <HAL_GPIO_Init+0x304>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4f      	ldr	r2, [pc, #316]	@ (80012d8 <HAL_GPIO_Init+0x308>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <HAL_GPIO_Init+0x30c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x310>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4b      	ldr	r2, [pc, #300]	@ (80012e8 <HAL_GPIO_Init+0x318>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x20a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <HAL_GPIO_Init+0x31c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x206>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a49      	ldr	r2, [pc, #292]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x202>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	@ (80012d4 <HAL_GPIO_Init+0x304>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a31      	ldr	r2, [pc, #196]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a26      	ldr	r2, [pc, #152]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae96 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43d9      	mvns	r1, r3
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	400b      	ands	r3, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff fd32 	bl	8000df4 <HAL_GetTick>
 8001390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001392:	e009      	b.n	80013a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001394:	f7ff fd2e 	bl	8000df4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013a2:	d901      	bls.n	80013a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e01f      	b.n	80013e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b4:	d1ee      	bne.n	8001394 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff fd1a 	bl	8000df4 <HAL_GetTick>
 80013c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013c2:	e009      	b.n	80013d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013c4:	f7ff fd16 	bl	8000df4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d2:	d901      	bls.n	80013d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e007      	b.n	80013e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013d8:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013e4:	d1ee      	bne.n	80013c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	420e0040 	.word	0x420e0040
 80013f8:	40007000 	.word	0x40007000
 80013fc:	420e0044 	.word	0x420e0044

08001400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0cc      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b68      	ldr	r3, [pc, #416]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d90c      	bls.n	800143c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b65      	ldr	r3, [pc, #404]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800145e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a52      	ldr	r2, [pc, #328]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d044      	beq.n	8001520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d119      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d003      	beq.n	80014be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e06f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e067      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014de:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f023 0203 	bic.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4934      	ldr	r1, [pc, #208]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff fc80 	bl	8000df4 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	e00a      	b.n	800150e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff fc7c 	bl	8000df4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 020c 	and.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	429a      	cmp	r2, r3
 800151e:	d1eb      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d20c      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f887 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490a      	ldr	r1, [pc, #40]	@ (80015c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_RCC_ClockConfig+0x1c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fada 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00
 80015bc:	40023800 	.word	0x40023800
 80015c0:	08006db0 	.word	0x08006db0
 80015c4:	20000004 	.word	0x20000004
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e8:	f7ff fff0 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	0a9b      	lsrs	r3, r3, #10
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	4903      	ldr	r1, [pc, #12]	@ (8001608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	08006dc0 	.word	0x08006dc0

0800160c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001610:	f7ff ffdc 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	0b5b      	lsrs	r3, r3, #13
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	@ (8001630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	08006dc0 	.word	0x08006dc0

08001634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	220f      	movs	r2, #15
 8001642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_GetClockConfig+0x5c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_RCC_GetClockConfig+0x5c>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_RCC_GetClockConfig+0x5c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_RCC_GetClockConfig+0x5c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <HAL_RCC_GetClockConfig+0x60>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 020f 	and.w	r2, r3, #15
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800169c:	b0ae      	sub	sp, #184	@ 0xb8
 800169e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016be:	4bcb      	ldr	r3, [pc, #812]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	f200 8206 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x440>
 80016cc:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	08001709 	.word	0x08001709
 80016d8:	08001ad9 	.word	0x08001ad9
 80016dc:	08001ad9 	.word	0x08001ad9
 80016e0:	08001ad9 	.word	0x08001ad9
 80016e4:	08001711 	.word	0x08001711
 80016e8:	08001ad9 	.word	0x08001ad9
 80016ec:	08001ad9 	.word	0x08001ad9
 80016f0:	08001ad9 	.word	0x08001ad9
 80016f4:	08001719 	.word	0x08001719
 80016f8:	08001ad9 	.word	0x08001ad9
 80016fc:	08001ad9 	.word	0x08001ad9
 8001700:	08001ad9 	.word	0x08001ad9
 8001704:	08001909 	.word	0x08001909
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4bb9      	ldr	r3, [pc, #740]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800170a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800170e:	e1e7      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4bb8      	ldr	r3, [pc, #736]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001716:	e1e3      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001718:	4bb4      	ldr	r3, [pc, #720]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001724:	4bb1      	ldr	r3, [pc, #708]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d071      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001730:	4bae      	ldr	r3, [pc, #696]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	2200      	movs	r2, #0
 8001738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800173c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4621      	mov	r1, r4
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	6439      	str	r1, [r7, #64]	@ 0x40
 8001774:	4629      	mov	r1, r5
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001788:	4649      	mov	r1, r9
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4641      	mov	r1, r8
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4641      	mov	r1, r8
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4641      	mov	r1, r8
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80017b0:	4649      	mov	r1, r9
 80017b2:	00cb      	lsls	r3, r1, #3
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ba:	4641      	mov	r1, r8
 80017bc:	00ca      	lsls	r2, r1, #3
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	4622      	mov	r2, r4
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ca:	462b      	mov	r3, r5
 80017cc:	460a      	mov	r2, r1
 80017ce:	eb42 0303 	adc.w	r3, r2, r3
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017e0:	4629      	mov	r1, r5
 80017e2:	024b      	lsls	r3, r1, #9
 80017e4:	4621      	mov	r1, r4
 80017e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017ea:	4621      	mov	r1, r4
 80017ec:	024a      	lsls	r2, r1, #9
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001800:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001804:	f7fe fd54 	bl	80002b0 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001812:	e067      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b75      	ldr	r3, [pc, #468]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001820:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001824:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800182c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800182e:	2300      	movs	r3, #0
 8001830:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001832:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001836:	4622      	mov	r2, r4
 8001838:	462b      	mov	r3, r5
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0159      	lsls	r1, r3, #5
 8001844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001848:	0150      	lsls	r0, r2, #5
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4621      	mov	r1, r4
 8001850:	1a51      	subs	r1, r2, r1
 8001852:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001854:	4629      	mov	r1, r5
 8001856:	eb63 0301 	sbc.w	r3, r3, r1
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001868:	4649      	mov	r1, r9
 800186a:	018b      	lsls	r3, r1, #6
 800186c:	4641      	mov	r1, r8
 800186e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001872:	4641      	mov	r1, r8
 8001874:	018a      	lsls	r2, r1, #6
 8001876:	4641      	mov	r1, r8
 8001878:	ebb2 0a01 	subs.w	sl, r2, r1
 800187c:	4649      	mov	r1, r9
 800187e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800188e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001896:	4692      	mov	sl, r2
 8001898:	469b      	mov	fp, r3
 800189a:	4623      	mov	r3, r4
 800189c:	eb1a 0303 	adds.w	r3, sl, r3
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	462b      	mov	r3, r5
 80018a4:	eb4b 0303 	adc.w	r3, fp, r3
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018b6:	4629      	mov	r1, r5
 80018b8:	028b      	lsls	r3, r1, #10
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c0:	4621      	mov	r1, r4
 80018c2:	028a      	lsls	r2, r1, #10
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018cc:	2200      	movs	r2, #0
 80018ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80018d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80018d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018d6:	f7fe fceb 	bl	80002b0 <__aeabi_uldivmod>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4613      	mov	r3, r2
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018e4:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	3301      	adds	r3, #1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80018f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001906:	e0eb      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001914:	4b35      	ldr	r3, [pc, #212]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d06b      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	2200      	movs	r2, #0
 8001928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800192a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800192c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001932:	663b      	str	r3, [r7, #96]	@ 0x60
 8001934:	2300      	movs	r3, #0
 8001936:	667b      	str	r3, [r7, #100]	@ 0x64
 8001938:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800193c:	4622      	mov	r2, r4
 800193e:	462b      	mov	r3, r5
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	0159      	lsls	r1, r3, #5
 800194a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194e:	0150      	lsls	r0, r2, #5
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4621      	mov	r1, r4
 8001956:	1a51      	subs	r1, r2, r1
 8001958:	61b9      	str	r1, [r7, #24]
 800195a:	4629      	mov	r1, r5
 800195c:	eb63 0301 	sbc.w	r3, r3, r1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800196e:	4659      	mov	r1, fp
 8001970:	018b      	lsls	r3, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001978:	4651      	mov	r1, sl
 800197a:	018a      	lsls	r2, r1, #6
 800197c:	4651      	mov	r1, sl
 800197e:	ebb2 0801 	subs.w	r8, r2, r1
 8001982:	4659      	mov	r1, fp
 8001984:	eb63 0901 	sbc.w	r9, r3, r1
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001994:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001998:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199c:	4690      	mov	r8, r2
 800199e:	4699      	mov	r9, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	eb18 0303 	adds.w	r3, r8, r3
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	462b      	mov	r3, r5
 80019aa:	eb49 0303 	adc.w	r3, r9, r3
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019bc:	4629      	mov	r1, r5
 80019be:	024b      	lsls	r3, r1, #9
 80019c0:	4621      	mov	r1, r4
 80019c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c6:	4621      	mov	r1, r4
 80019c8:	024a      	lsls	r2, r1, #9
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019d2:	2200      	movs	r2, #0
 80019d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019dc:	f7fe fc68 	bl	80002b0 <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4613      	mov	r3, r2
 80019e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019ea:	e065      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x420>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x458>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	2200      	movs	r2, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	4611      	mov	r1, r2
 8001a04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001a12:	4642      	mov	r2, r8
 8001a14:	464b      	mov	r3, r9
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0159      	lsls	r1, r3, #5
 8001a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a24:	0150      	lsls	r0, r2, #5
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	1a51      	subs	r1, r2, r1
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	4649      	mov	r1, r9
 8001a32:	eb63 0301 	sbc.w	r3, r3, r1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a44:	4659      	mov	r1, fp
 8001a46:	018b      	lsls	r3, r1, #6
 8001a48:	4651      	mov	r1, sl
 8001a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4e:	4651      	mov	r1, sl
 8001a50:	018a      	lsls	r2, r1, #6
 8001a52:	4651      	mov	r1, sl
 8001a54:	1a54      	subs	r4, r2, r1
 8001a56:	4659      	mov	r1, fp
 8001a58:	eb63 0501 	sbc.w	r5, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	00eb      	lsls	r3, r5, #3
 8001a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6a:	00e2      	lsls	r2, r4, #3
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	18e3      	adds	r3, r4, r3
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	464b      	mov	r3, r9
 8001a78:	eb45 0303 	adc.w	r3, r5, r3
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aa4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001aa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001aaa:	f7fe fc01 	bl	80002b0 <__aeabi_uldivmod>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0f1b      	lsrs	r3, r3, #28
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ad6:	e003      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	37b8      	adds	r7, #184	@ 0xb8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400

08001af8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e28d      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8083 	beq.w	8001c1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b18:	4b94      	ldr	r3, [pc, #592]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d019      	beq.n	8001b58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b24:	4b91      	ldr	r3, [pc, #580]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b30:	4b8e      	ldr	r3, [pc, #568]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b3c:	d00c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d112      	bne.n	8001b70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b56:	d10b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4b84      	ldr	r3, [pc, #528]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d05b      	beq.n	8001c1c <HAL_RCC_OscConfig+0x124>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d157      	bne.n	8001c1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e25a      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x90>
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xcc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xb4>
 8001b92:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a75      	ldr	r2, [pc, #468]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b73      	ldr	r3, [pc, #460]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a72      	ldr	r2, [pc, #456]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xcc>
 8001bac:	4b6f      	ldr	r3, [pc, #444]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f912 	bl	8000df4 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f90e 	bl	8000df4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e21f      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b61      	ldr	r3, [pc, #388]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xdc>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f8fe 	bl	8000df4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f8fa 	bl	8000df4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e20b      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x104>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d06f      	beq.n	8001d0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c2a:	4b50      	ldr	r3, [pc, #320]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d017      	beq.n	8001c66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c36:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x186>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1d3      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x278>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f8a7 	bl	8000df4 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff f8a3 	bl	8000df4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1b4      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4925      	ldr	r1, [pc, #148]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_OscConfig+0x278>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f886 	bl	8000df4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff f882 	bl	8000df4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e193      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff f866 	bl	8000df4 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f862 	bl	8000df4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e173      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x234>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff f84f 	bl	8000df4 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f84b 	bl	8000df4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e15c      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470000 	.word	0x42470000
 8001d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ea      	bne.n	8001d5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8097 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b83      	ldr	r3, [pc, #524]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a7e      	ldr	r2, [pc, #504]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a75      	ldr	r2, [pc, #468]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b0>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f80b 	bl	8000df4 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff f807 	bl	8000df4 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e118      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x31e>
 8001e08:	4b66      	ldr	r3, [pc, #408]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a65      	ldr	r2, [pc, #404]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x358>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x340>
 8001e1e:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a60      	ldr	r2, [pc, #384]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x358>
 8001e38:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a59      	ldr	r2, [pc, #356]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b57      	ldr	r3, [pc, #348]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a56      	ldr	r2, [pc, #344]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7fe ffcc 	bl	8000df4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7fe ffc8 	bl	8000df4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0d7      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x368>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe ffb6 	bl	8000df4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ffb2 	bl	8000df4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0c1      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ad 	beq.w	8002024 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eca:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d060      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d145      	bne.n	8001f6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b33      	ldr	r3, [pc, #204]	@ (8001fac <HAL_RCC_OscConfig+0x4b4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff86 	bl	8000df4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ff82 	bl	8000df4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e093      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	071b      	lsls	r3, r3, #28
 8001f36:	491b      	ldr	r1, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x4b4>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe ff57 	bl	8000df4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe ff53 	bl	8000df4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e064      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x452>
 8001f68:	e05c      	b.n	8002024 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_RCC_OscConfig+0x4b4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff40 	bl	8000df4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe ff3c 	bl	8000df4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04d      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x480>
 8001f96:	e045      	b.n	8002024 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e040      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_RCC_OscConfig+0x538>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d030      	beq.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d129      	bne.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d122      	bne.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d119      	bne.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10f      	bne.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f839 	bl	80020d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f9c0 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d001      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e04e      	b.n	800219e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a23      	ldr	r2, [pc, #140]	@ (80021ac <HAL_TIM_Base_Start_IT+0xc4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d022      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212a:	d01d      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d018      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x80>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b06      	cmp	r3, #6
 8002178:	d010      	beq.n	800219c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	e007      	b.n	800219c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40001800 	.word	0x40001800

080021c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0202 	mvn.w	r2, #2
 80021fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8d2 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8c4 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f8d5 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d020      	beq.n	8002278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0204 	mvn.w	r2, #4
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8ac 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f89e 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f8af 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d020      	beq.n	80022c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0208 	mvn.w	r2, #8
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f886 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f878 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f889 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d020      	beq.n	8002310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0210 	mvn.w	r2, #16
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2208      	movs	r2, #8
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f860 	bl	80023bc <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f852 	bl	80023a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f863 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0201 	mvn.w	r2, #1
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fb8c 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f900 	bl	8002558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f834 	bl	80023e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0220 	mvn.w	r2, #32
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8d2 	bl	8002544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002416:	d00f      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a40      	ldr	r2, [pc, #256]	@ (800251c <TIM_Base_SetConfig+0x124>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00b      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <TIM_Base_SetConfig+0x128>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	@ (8002524 <TIM_Base_SetConfig+0x12c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a32      	ldr	r2, [pc, #200]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002458:	d027      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2f      	ldr	r2, [pc, #188]	@ (800251c <TIM_Base_SetConfig+0x124>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d023      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <TIM_Base_SetConfig+0x128>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2d      	ldr	r2, [pc, #180]	@ (8002524 <TIM_Base_SetConfig+0x12c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d017      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <TIM_Base_SetConfig+0x134>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <TIM_Base_SetConfig+0x138>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <TIM_Base_SetConfig+0x13c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <TIM_Base_SetConfig+0x140>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <TIM_Base_SetConfig+0x144>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <TIM_Base_SetConfig+0x148>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0xf2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d103      	bne.n	80024f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f043 0204 	orr.w	r2, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800
 8002524:	40000c00 	.word	0x40000c00
 8002528:	40010400 	.word	0x40010400
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800
 8002538:	40001800 	.word	0x40001800
 800253c:	40001c00 	.word	0x40001c00
 8002540:	40002000 	.word	0x40002000

08002544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e042      	b.n	8002604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fa9c 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	@ 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f973 	bl	800289c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	d175      	bne.n	8002718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Transmit+0x2c>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e06e      	b.n	800271a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	@ 0x21
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264a:	f7fe fbd3 	bl	8000df4 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002664:	d108      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e003      	b.n	8002680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002680:	e02e      	b.n	80026e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f848 	bl	8002722 <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03a      	b.n	800271a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3302      	adds	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e007      	b.n	80026d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1cb      	bne.n	8002682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2140      	movs	r1, #64	@ 0x40
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f814 	bl	8002722 <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002732:	e03b      	b.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d037      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7fe fb5a 	bl	8000df4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <UART_WaitOnFlagUntilTimeout+0x30>
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e03a      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b80      	cmp	r3, #128	@ 0x80
 8002768:	d020      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d01d      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b08      	cmp	r3, #8
 800277c:	d116      	bne.n	80027ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f81d 	bl	80027d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2208      	movs	r2, #8
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e00f      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d0b4      	beq.n	8002734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b095      	sub	sp, #84	@ 0x54
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e6:	e853 3f00 	ldrex	r3, [r3]
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e5      	bne.n	80027dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e5      	bne.n	8002810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	2b01      	cmp	r3, #1
 800284a:	d119      	bne.n	8002880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	60bb      	str	r3, [r7, #8]
   return(result);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 0310 	bic.w	r3, r3, #16
 8002862:	647b      	str	r3, [r7, #68]	@ 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286c:	61ba      	str	r2, [r7, #24]
 800286e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	6979      	ldr	r1, [r7, #20]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	613b      	str	r3, [r7, #16]
   return(result);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e5      	bne.n	800284c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800288e:	bf00      	nop
 8002890:	3754      	adds	r7, #84	@ 0x54
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800289c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a0:	b0c0      	sub	sp, #256	@ 0x100
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	68d9      	ldr	r1, [r3, #12]
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	ea40 0301 	orr.w	r3, r0, r1
 80028c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	431a      	orrs	r2, r3
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028f4:	f021 010c 	bic.w	r1, r1, #12
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002902:	430b      	orrs	r3, r1
 8002904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	6999      	ldr	r1, [r3, #24]
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	ea40 0301 	orr.w	r3, r0, r1
 8002922:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b68 <UART_SetConfig+0x2cc>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d005      	beq.n	800293c <UART_SetConfig+0xa0>
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b8d      	ldr	r3, [pc, #564]	@ (8002b6c <UART_SetConfig+0x2d0>)
 8002938:	429a      	cmp	r2, r3
 800293a:	d104      	bne.n	8002946 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800293c:	f7fe fe66 	bl	800160c <HAL_RCC_GetPCLK2Freq>
 8002940:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002944:	e003      	b.n	800294e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002946:	f7fe fe4d 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800294a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002958:	f040 810c 	bne.w	8002b74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800295c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002960:	2200      	movs	r2, #0
 8002962:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002966:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800296a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800296e:	4622      	mov	r2, r4
 8002970:	462b      	mov	r3, r5
 8002972:	1891      	adds	r1, r2, r2
 8002974:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002976:	415b      	adcs	r3, r3
 8002978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800297a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800297e:	4621      	mov	r1, r4
 8002980:	eb12 0801 	adds.w	r8, r2, r1
 8002984:	4629      	mov	r1, r5
 8002986:	eb43 0901 	adc.w	r9, r3, r1
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800299a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299e:	4690      	mov	r8, r2
 80029a0:	4699      	mov	r9, r3
 80029a2:	4623      	mov	r3, r4
 80029a4:	eb18 0303 	adds.w	r3, r8, r3
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ac:	462b      	mov	r3, r5
 80029ae:	eb49 0303 	adc.w	r3, r9, r3
 80029b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029ca:	460b      	mov	r3, r1
 80029cc:	18db      	adds	r3, r3, r3
 80029ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80029d0:	4613      	mov	r3, r2
 80029d2:	eb42 0303 	adc.w	r3, r2, r3
 80029d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029e0:	f7fd fc66 	bl	80002b0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <UART_SetConfig+0x2d4>)
 80029ea:	fba3 2302 	umull	r2, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	011c      	lsls	r4, r3, #4
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a14:	4641      	mov	r1, r8
 8002a16:	eb12 0a01 	adds.w	sl, r2, r1
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a34:	4692      	mov	sl, r2
 8002a36:	469b      	mov	fp, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a42:	464b      	mov	r3, r9
 8002a44:	eb4b 0303 	adc.w	r3, fp, r3
 8002a48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a60:	460b      	mov	r3, r1
 8002a62:	18db      	adds	r3, r3, r3
 8002a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a66:	4613      	mov	r3, r2
 8002a68:	eb42 0303 	adc.w	r3, r2, r3
 8002a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a76:	f7fd fc1b 	bl	80002b0 <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <UART_SetConfig+0x2d4>)
 8002a82:	fba3 2301 	umull	r2, r3, r3, r1
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2264      	movs	r2, #100	@ 0x64
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	1acb      	subs	r3, r1, r3
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a96:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <UART_SetConfig+0x2d4>)
 8002a98:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002aa4:	441c      	add	r4, r3
 8002aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ab4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	1891      	adds	r1, r2, r2
 8002abe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ac8:	4641      	mov	r1, r8
 8002aca:	1851      	adds	r1, r2, r1
 8002acc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ace:	4649      	mov	r1, r9
 8002ad0:	414b      	adcs	r3, r1
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	00cb      	lsls	r3, r1, #3
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aea:	4651      	mov	r1, sl
 8002aec:	00ca      	lsls	r2, r1, #3
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	4642      	mov	r2, r8
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002afc:	464b      	mov	r3, r9
 8002afe:	460a      	mov	r2, r1
 8002b00:	eb42 0303 	adc.w	r3, r2, r3
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	18db      	adds	r3, r3, r3
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b22:	4613      	mov	r3, r2
 8002b24:	eb42 0303 	adc.w	r3, r2, r3
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b32:	f7fd fbbd 	bl	80002b0 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <UART_SetConfig+0x2d4>)
 8002b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2164      	movs	r1, #100	@ 0x64
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3332      	adds	r3, #50	@ 0x32
 8002b4e:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <UART_SetConfig+0x2d4>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 0207 	and.w	r2, r3, #7
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4422      	add	r2, r4
 8002b62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b64:	e106      	b.n	8002d74 <UART_SetConfig+0x4d8>
 8002b66:	bf00      	nop
 8002b68:	40011000 	.word	0x40011000
 8002b6c:	40011400 	.word	0x40011400
 8002b70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b86:	4642      	mov	r2, r8
 8002b88:	464b      	mov	r3, r9
 8002b8a:	1891      	adds	r1, r2, r2
 8002b8c:	6239      	str	r1, [r7, #32]
 8002b8e:	415b      	adcs	r3, r3
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b96:	4641      	mov	r1, r8
 8002b98:	1854      	adds	r4, r2, r1
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	eb43 0501 	adc.w	r5, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	18e3      	adds	r3, r4, r3
 8002bb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	eb45 0303 	adc.w	r3, r5, r3
 8002bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002be2:	4629      	mov	r1, r5
 8002be4:	008b      	lsls	r3, r1, #2
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bec:	4621      	mov	r1, r4
 8002bee:	008a      	lsls	r2, r1, #2
 8002bf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bf4:	f7fd fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b60      	ldr	r3, [pc, #384]	@ (8002d80 <UART_SetConfig+0x4e4>)
 8002bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	011c      	lsls	r4, r3, #4
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	61b9      	str	r1, [r7, #24]
 8002c20:	415b      	adcs	r3, r3
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c28:	4641      	mov	r1, r8
 8002c2a:	1851      	adds	r1, r2, r1
 8002c2c:	6139      	str	r1, [r7, #16]
 8002c2e:	4649      	mov	r1, r9
 8002c30:	414b      	adcs	r3, r1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c40:	4659      	mov	r1, fp
 8002c42:	00cb      	lsls	r3, r1, #3
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	00ca      	lsls	r2, r1, #3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	4642      	mov	r2, r8
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	460a      	mov	r2, r1
 8002c60:	eb42 0303 	adc.w	r3, r2, r3
 8002c64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c80:	4649      	mov	r1, r9
 8002c82:	008b      	lsls	r3, r1, #2
 8002c84:	4641      	mov	r1, r8
 8002c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	008a      	lsls	r2, r1, #2
 8002c8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c92:	f7fd fb0d 	bl	80002b0 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4b38      	ldr	r3, [pc, #224]	@ (8002d80 <UART_SetConfig+0x4e4>)
 8002c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2264      	movs	r2, #100	@ 0x64
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	1acb      	subs	r3, r1, r3
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	3332      	adds	r3, #50	@ 0x32
 8002cb0:	4a33      	ldr	r2, [pc, #204]	@ (8002d80 <UART_SetConfig+0x4e4>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cbc:	441c      	add	r4, r3
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0e:	464b      	mov	r3, r9
 8002d10:	460a      	mov	r2, r1
 8002d12:	eb42 0303 	adc.w	r3, r2, r3
 8002d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d22:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d30:	4649      	mov	r1, r9
 8002d32:	008b      	lsls	r3, r1, #2
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	008a      	lsls	r2, r1, #2
 8002d3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d42:	f7fd fab5 	bl	80002b0 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <UART_SetConfig+0x4e4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	@ 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	3332      	adds	r3, #50	@ 0x32
 8002d5e:	4a08      	ldr	r2, [pc, #32]	@ (8002d80 <UART_SetConfig+0x4e4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4422      	add	r2, r4
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d80:	51eb851f 	.word	0x51eb851f

08002d84 <__NVIC_SetPriority>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	@ (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <SysTick_Handler+0x1c>)
 8002dde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002de0:	f002 f8b2 	bl	8004f48 <xTaskGetSchedulerState>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002dea:	f002 ffad 	bl	8005d48 <xPortSysTickHandler>
  }
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f06f 0004 	mvn.w	r0, #4
 8002e02:	f7ff ffbf 	bl	8002d84 <__NVIC_SetPriority>
#endif
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e12:	f3ef 8305 	mrs	r3, IPSR
 8002e16:	603b      	str	r3, [r7, #0]
  return(result);
 8002e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e1e:	f06f 0305 	mvn.w	r3, #5
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	e00c      	b.n	8002e40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <osKernelInitialize+0x44>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <osKernelInitialize+0x44>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	e002      	b.n	8002e40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000158 	.word	0x20000158

08002e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e5a:	f3ef 8305 	mrs	r3, IPSR
 8002e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e66:	f06f 0305 	mvn.w	r3, #5
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	e010      	b.n	8002e90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <osKernelStart+0x48>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d109      	bne.n	8002e8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e76:	f7ff ffbf 	bl	8002df8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <osKernelStart+0x48>)
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e80:	f001 fbdc 	bl	800463c <vTaskStartScheduler>
      stat = osOK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e002      	b.n	8002e90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000158 	.word	0x20000158

08002ea0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ea6:	f3ef 8305 	mrs	r3, IPSR
 8002eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8002eac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002eb2:	f001 fcef 	bl	8004894 <xTaskGetTickCountFromISR>
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	e002      	b.n	8002ec0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002eba:	f001 fcdb 	bl	8004874 <xTaskGetTickCount>
 8002ebe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08e      	sub	sp, #56	@ 0x38
 8002ece:	af04      	add	r7, sp, #16
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eda:	f3ef 8305 	mrs	r3, IPSR
 8002ede:	617b      	str	r3, [r7, #20]
  return(result);
 8002ee0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d17e      	bne.n	8002fe4 <osThreadNew+0x11a>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d07b      	beq.n	8002fe4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ef0:	2318      	movs	r3, #24
 8002ef2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d045      	beq.n	8002f90 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <osThreadNew+0x48>
        name = attr->name;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <osThreadNew+0x6e>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b38      	cmp	r3, #56	@ 0x38
 8002f2a:	d805      	bhi.n	8002f38 <osThreadNew+0x6e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <osThreadNew+0x72>
        return (NULL);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e054      	b.n	8002fe6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <osThreadNew+0xa8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f5a:	d90a      	bls.n	8002f72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <osThreadNew+0xa8>
        mem = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e010      	b.n	8002f94 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <osThreadNew+0xca>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <osThreadNew+0xca>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <osThreadNew+0xca>
          mem = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e001      	b.n	8002f94 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d110      	bne.n	8002fbc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f001 f94f 	bl	8004254 <xTaskCreateStatic>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	e013      	b.n	8002fe4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d110      	bne.n	8002fe4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f107 0310 	add.w	r3, r7, #16
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f001 f99d 	bl	8004314 <xTaskCreate>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <osThreadNew+0x11a>
            hTask = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fe4:	693b      	ldr	r3, [r7, #16]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3728      	adds	r7, #40	@ 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8002ff4:	f001 ff98 	bl	8004f28 <xTaskGetCurrentTaskHandle>
 8002ff8:	6078      	str	r0, [r7, #4]

  return (id);
 8002ffa:	687b      	ldr	r3, [r7, #4]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800300c:	f3ef 8305 	mrs	r3, IPSR
 8003010:	60bb      	str	r3, [r7, #8]
  return(result);
 8003012:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <osDelay+0x1c>
    stat = osErrorISR;
 8003018:	f06f 0305 	mvn.w	r3, #5
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e007      	b.n	8003030 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <osDelay+0x2c>
      vTaskDelay(ticks);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f001 fad0 	bl	80045d0 <vTaskDelay>
    }
  }

  return (stat);
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800303a:	b580      	push	{r7, lr}
 800303c:	b088      	sub	sp, #32
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003046:	f3ef 8305 	mrs	r3, IPSR
 800304a:	60bb      	str	r3, [r7, #8]
  return(result);
 800304c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800304e:	2b00      	cmp	r3, #0
 8003050:	d174      	bne.n	800313c <osMutexNew+0x102>
    if (attr != NULL) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e001      	b.n	8003064 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <osMutexNew+0x3a>
      rmtx = 1U;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e001      	b.n	8003078 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d15c      	bne.n	800313c <osMutexNew+0x102>
      mem = -1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <osMutexNew+0x6a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b4f      	cmp	r3, #79	@ 0x4f
 800309c:	d902      	bls.n	80030a4 <osMutexNew+0x6a>
          mem = 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e00c      	b.n	80030be <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <osMutexNew+0x84>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d104      	bne.n	80030be <osMutexNew+0x84>
            mem = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e001      	b.n	80030be <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4619      	mov	r1, r3
 80030d0:	2004      	movs	r0, #4
 80030d2:	f000 fb20 	bl	8003716 <xQueueCreateMutexStatic>
 80030d6:	61f8      	str	r0, [r7, #28]
 80030d8:	e016      	b.n	8003108 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4619      	mov	r1, r3
 80030e0:	2001      	movs	r0, #1
 80030e2:	f000 fb18 	bl	8003716 <xQueueCreateMutexStatic>
 80030e6:	61f8      	str	r0, [r7, #28]
 80030e8:	e00e      	b.n	8003108 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80030f6:	2004      	movs	r0, #4
 80030f8:	f000 faf5 	bl	80036e6 <xQueueCreateMutex>
 80030fc:	61f8      	str	r0, [r7, #28]
 80030fe:	e003      	b.n	8003108 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003100:	2001      	movs	r0, #1
 8003102:	f000 faf0 	bl	80036e6 <xQueueCreateMutex>
 8003106:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <osMutexNew+0xee>
        if (attr != NULL) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <osMutexNew+0xe2>
          name = attr->name;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e001      	b.n	8003120 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	69f8      	ldr	r0, [r7, #28]
 8003124:	f001 f838 	bl	8004198 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <osMutexNew+0x102>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800313c:	69fb      	ldr	r3, [r7, #28]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003164:	f3ef 8305 	mrs	r3, IPSR
 8003168:	60bb      	str	r3, [r7, #8]
  return(result);
 800316a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003170:	f06f 0305 	mvn.w	r3, #5
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e02c      	b.n	80031d2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800317e:	f06f 0303 	mvn.w	r3, #3
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e025      	b.n	80031d2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d011      	beq.n	80031b0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	6938      	ldr	r0, [r7, #16]
 8003190:	f000 fb11 	bl	80037b6 <xQueueTakeMutexRecursive>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d01b      	beq.n	80031d2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80031a0:	f06f 0301 	mvn.w	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e014      	b.n	80031d2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80031a8:	f06f 0302 	mvn.w	r3, #2
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e010      	b.n	80031d2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f000 fdb8 	bl	8003d28 <xQueueSemaphoreTake>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d009      	beq.n	80031d2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80031c4:	f06f 0301 	mvn.w	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e002      	b.n	80031d2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80031cc:	f06f 0302 	mvn.w	r3, #2
 80031d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80031d2:	697b      	ldr	r3, [r7, #20]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f8:	f3ef 8305 	mrs	r3, IPSR
 80031fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <osMutexRelease+0x30>
    stat = osErrorISR;
 8003204:	f06f 0305 	mvn.w	r3, #5
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e01f      	b.n	800324c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003212:	f06f 0303 	mvn.w	r3, #3
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e018      	b.n	800324c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003220:	6938      	ldr	r0, [r7, #16]
 8003222:	f000 fa93 	bl	800374c <xQueueGiveMutexRecursive>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d00f      	beq.n	800324c <osMutexRelease+0x70>
        stat = osErrorResource;
 800322c:	f06f 0302 	mvn.w	r3, #2
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e00b      	b.n	800324c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003234:	2300      	movs	r3, #0
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	6938      	ldr	r0, [r7, #16]
 800323c:	f000 faf2 	bl	8003824 <xQueueGenericSend>
 8003240:	4603      	mov	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d002      	beq.n	800324c <osMutexRelease+0x70>
        stat = osErrorResource;
 8003246:	f06f 0302 	mvn.w	r3, #2
 800324a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <vApplicationGetIdleTaskMemory+0x2c>)
 8003268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a06      	ldr	r2, [pc, #24]	@ (8003288 <vApplicationGetIdleTaskMemory+0x30>)
 800326e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000015c 	.word	0x2000015c
 8003288:	20000204 	.word	0x20000204

0800328c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800329c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <vApplicationGetTimerTaskMemory+0x30>)
 80032a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	20000404 	.word	0x20000404
 80032bc:	200004ac 	.word	0x200004ac

080032c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f103 0208 	add.w	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f103 0208 	add.w	r2, r3, #8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0208 	add.w	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d103      	bne.n	8003382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e00c      	b.n	800339c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3308      	adds	r3, #8
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e002      	b.n	8003390 <vListInsert+0x2e>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	d2f6      	bcs.n	800338a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6852      	ldr	r2, [r2, #4]
 80033f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d103      	bne.n	8003408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003454:	f002 fbe8 	bl	8005c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	441a      	add	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	3b01      	subs	r3, #1
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	22ff      	movs	r2, #255	@ 0xff
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	22ff      	movs	r2, #255	@ 0xff
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d114      	bne.n	80034d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01a      	beq.n	80034e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3310      	adds	r3, #16
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fb70 	bl	8004b9c <xTaskRemoveFromEventList>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <xQueueGenericReset+0xd0>)
 80034c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	e009      	b.n	80034e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3310      	adds	r3, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fef1 	bl	80032c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3324      	adds	r3, #36	@ 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff feec 	bl	80032c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034e8:	f002 fbd0 	bl	8005c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	@ 0x38
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	e7fd      	b.n	8003542 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <xQueueGenericCreateStatic+0x56>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <xQueueGenericCreateStatic+0x5a>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <xQueueGenericCreateStatic+0x5c>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	623b      	str	r3, [r7, #32]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <xQueueGenericCreateStatic+0x84>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <xQueueGenericCreateStatic+0x88>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <xQueueGenericCreateStatic+0x8a>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	61fb      	str	r3, [r7, #28]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035a2:	2350      	movs	r3, #80	@ 0x50
 80035a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b50      	cmp	r3, #80	@ 0x50
 80035aa:	d00b      	beq.n	80035c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	61bb      	str	r3, [r7, #24]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f840 	bl	800366c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3730      	adds	r7, #48	@ 0x30
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b08a      	sub	sp, #40	@ 0x28
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <xQueueGenericCreate+0x2c>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	613b      	str	r3, [r7, #16]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3350      	adds	r3, #80	@ 0x50
 8003630:	4618      	mov	r0, r3
 8003632:	f002 fc1b 	bl	8005e6c <pvPortMalloc>
 8003636:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d011      	beq.n	8003662 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3350      	adds	r3, #80	@ 0x50
 8003646:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003650:	79fa      	ldrb	r2, [r7, #7]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f805 	bl	800366c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003662:	69bb      	ldr	r3, [r7, #24]
	}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e002      	b.n	800368e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800369a:	2101      	movs	r1, #1
 800369c:	69b8      	ldr	r0, [r7, #24]
 800369e:	f7ff fec3 	bl	8003428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80036d2:	2300      	movs	r3, #0
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8a3 	bl	8003824 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6939      	ldr	r1, [r7, #16]
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff ff79 	bl	80035f6 <xQueueGenericCreate>
 8003704:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ffd3 	bl	80036b2 <prvInitialiseMutex>

		return xNewQueue;
 800370c:	68fb      	ldr	r3, [r7, #12]
	}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003716:	b580      	push	{r7, lr}
 8003718:	b088      	sub	sp, #32
 800371a:	af02      	add	r7, sp, #8
 800371c:	4603      	mov	r3, r0
 800371e:	6039      	str	r1, [r7, #0]
 8003720:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003722:	2301      	movs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	6939      	ldr	r1, [r7, #16]
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f7ff fee1 	bl	80034fc <xQueueGenericCreateStatic>
 800373a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ffb8 	bl	80036b2 <prvInitialiseMutex>

		return xNewQueue;
 8003742:	68fb      	ldr	r3, [r7, #12]
	}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60fb      	str	r3, [r7, #12]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	689c      	ldr	r4, [r3, #8]
 800377a:	f001 fbd5 	bl	8004f28 <xTaskGetCurrentTaskHandle>
 800377e:	4603      	mov	r3, r0
 8003780:	429c      	cmp	r4, r3
 8003782:	d111      	bne.n	80037a8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	6938      	ldr	r0, [r7, #16]
 800379e:	f000 f841 	bl	8003824 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e001      	b.n	80037ac <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80037ac:	697b      	ldr	r3, [r7, #20]
	}
 80037ae:	4618      	mov	r0, r3
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}

080037b6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80037b6:	b590      	push	{r4, r7, lr}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	60fb      	str	r3, [r7, #12]
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	e7fd      	b.n	80037de <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	689c      	ldr	r4, [r3, #8]
 80037e6:	f001 fb9f 	bl	8004f28 <xTaskGetCurrentTaskHandle>
 80037ea:	4603      	mov	r3, r0
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d107      	bne.n	8003800 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e00c      	b.n	800381a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	6938      	ldr	r0, [r7, #16]
 8003804:	f000 fa90 	bl	8003d28 <xQueueSemaphoreTake>
 8003808:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800381a:	697b      	ldr	r3, [r7, #20]
	}
 800381c:	4618      	mov	r0, r3
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}

08003824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <xQueueGenericSend+0x34>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	e7fd      	b.n	8003854 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <xQueueGenericSend+0x42>
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <xQueueGenericSend+0x46>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xQueueGenericSend+0x48>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <xQueueGenericSend+0x64>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d103      	bne.n	8003896 <xQueueGenericSend+0x72>
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <xQueueGenericSend+0x76>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <xQueueGenericSend+0x78>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <xQueueGenericSend+0x94>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	623b      	str	r3, [r7, #32]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038b8:	f001 fb46 	bl	8004f48 <xTaskGetSchedulerState>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <xQueueGenericSend+0xa4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <xQueueGenericSend+0xa8>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <xQueueGenericSend+0xaa>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <xQueueGenericSend+0xc6>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61fb      	str	r3, [r7, #28]
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	e7fd      	b.n	80038e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ea:	f002 f99d 	bl	8005c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <xQueueGenericSend+0xdc>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d129      	bne.n	8003954 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003906:	f000 fb37 	bl	8003f78 <prvCopyDataToQueue>
 800390a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	3324      	adds	r3, #36	@ 0x24
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f93f 	bl	8004b9c <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b3f      	ldr	r3, [pc, #252]	@ (8003a24 <xQueueGenericSend+0x200>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	e00a      	b.n	800394c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b39      	ldr	r3, [pc, #228]	@ (8003a24 <xQueueGenericSend+0x200>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800394c:	f002 f99e 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	e063      	b.n	8003a1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800395a:	f002 f997 	bl	8005c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800395e:	2300      	movs	r3, #0
 8003960:	e05c      	b.n	8003a1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f979 	bl	8004c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003976:	f002 f989 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800397a:	f000 fecf 	bl	800471c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800397e:	f002 f953 	bl	8005c28 <vPortEnterCritical>
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d103      	bne.n	8003998 <xQueueGenericSend+0x174>
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSend+0x18a>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ae:	f002 f96d 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039b2:	1d3a      	adds	r2, r7, #4
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f968 	bl	8004c90 <xTaskCheckForTimeOut>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d124      	bne.n	8003a10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c8:	f000 fbce 	bl	8004168 <prvIsQueueFull>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	3310      	adds	r3, #16
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f88c 	bl	8004af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039e2:	f000 fb59 	bl	8004098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039e6:	f000 fea7 	bl	8004738 <xTaskResumeAll>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f af7c 	bne.w	80038ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80039f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a24 <xQueueGenericSend+0x200>)
 80039f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	e772      	b.n	80038ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a06:	f000 fb47 	bl	8004098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a0a:	f000 fe95 	bl	8004738 <xTaskResumeAll>
 8003a0e:	e76c      	b.n	80038ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a12:	f000 fb41 	bl	8004098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a16:	f000 fe8f 	bl	8004738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3738      	adds	r7, #56	@ 0x38
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b090      	sub	sp, #64	@ 0x40
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <xQueueGenericSendFromISR+0x3e>
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <xQueueGenericSendFromISR+0x42>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueGenericSendFromISR+0x44>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d103      	bne.n	8003a96 <xQueueGenericSendFromISR+0x6e>
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <xQueueGenericSendFromISR+0x72>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <xQueueGenericSendFromISR+0x74>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	623b      	str	r3, [r7, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ab8:	f002 f996 	bl	8005de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003abc:	f3ef 8211 	mrs	r2, BASEPRI
 8003ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <xQueueGenericSendFromISR+0xc2>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d12f      	bne.n	8003b4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b00:	f000 fa3a 	bl	8003f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d112      	bne.n	8003b34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	3324      	adds	r3, #36	@ 0x24
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f83e 	bl	8004b9c <xTaskRemoveFromEventList>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b38:	3301      	adds	r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	b25a      	sxtb	r2, r3
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b44:	2301      	movs	r3, #1
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b48:	e001      	b.n	8003b4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3740      	adds	r7, #64	@ 0x40
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	@ 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <xQueueReceive+0x32>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	623b      	str	r3, [r7, #32]
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	e7fd      	b.n	8003b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xQueueReceive+0x40>
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <xQueueReceive+0x44>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <xQueueReceive+0x46>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <xQueueReceive+0x62>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	61fb      	str	r3, [r7, #28]
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	e7fd      	b.n	8003bc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc6:	f001 f9bf 	bl	8004f48 <xTaskGetSchedulerState>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <xQueueReceive+0x72>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xQueueReceive+0x76>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueReceive+0x78>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <xQueueReceive+0x94>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61bb      	str	r3, [r7, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf8:	f002 f816 	bl	8005c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01f      	beq.n	8003c48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c0c:	f000 fa1e 	bl	800404c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	1e5a      	subs	r2, r3, #1
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00f      	beq.n	8003c40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	3310      	adds	r3, #16
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 ffb9 	bl	8004b9c <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <xQueueReceive+0x1c0>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c40:	f002 f824 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e069      	b.n	8003d1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4e:	f002 f81d 	bl	8005c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e062      	b.n	8003d1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 ffff 	bl	8004c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c6a:	f002 f80f 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6e:	f000 fd55 	bl	800471c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c72:	f001 ffd9 	bl	8005c28 <vPortEnterCritical>
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0x128>
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d103      	bne.n	8003ca2 <xQueueReceive+0x13e>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca2:	f001 fff3 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca6:	1d3a      	adds	r2, r7, #4
 8003ca8:	f107 0310 	add.w	r3, r7, #16
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 ffee 	bl	8004c90 <xTaskCheckForTimeOut>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d123      	bne.n	8003d02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cbc:	f000 fa3e 	bl	800413c <prvIsQueueEmpty>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	3324      	adds	r3, #36	@ 0x24
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff12 	bl	8004af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd6:	f000 f9df 	bl	8004098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cda:	f000 fd2d 	bl	8004738 <xTaskResumeAll>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d189      	bne.n	8003bf8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <xQueueReceive+0x1c0>)
 8003ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	e780      	b.n	8003bf8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cf8:	f000 f9ce 	bl	8004098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfc:	f000 fd1c 	bl	8004738 <xTaskResumeAll>
 8003d00:	e77a      	b.n	8003bf8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d04:	f000 f9c8 	bl	8004098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d08:	f000 fd16 	bl	8004738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d0e:	f000 fa15 	bl	800413c <prvIsQueueEmpty>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f43f af6f 	beq.w	8003bf8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3730      	adds	r7, #48	@ 0x30
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08e      	sub	sp, #56	@ 0x38
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	623b      	str	r3, [r7, #32]
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	61fb      	str	r3, [r7, #28]
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d7c:	f001 f8e4 	bl	8004f48 <xTaskGetSchedulerState>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <xQueueSemaphoreTake+0x64>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <xQueueSemaphoreTake+0x68>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <xQueueSemaphoreTake+0x6a>
 8003d90:	2300      	movs	r3, #0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	61bb      	str	r3, [r7, #24]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dae:	f001 ff3b 	bl	8005c28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d024      	beq.n	8003e08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dce:	f001 fa35 	bl	800523c <pvTaskIncrementMutexHeldCount>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00f      	beq.n	8003e00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	3310      	adds	r3, #16
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fed9 	bl	8004b9c <xTaskRemoveFromEventList>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003df0:	4b54      	ldr	r3, [pc, #336]	@ (8003f44 <xQueueSemaphoreTake+0x21c>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e00:	f001 ff44 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e098      	b.n	8003f3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d112      	bne.n	8003e34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	617b      	str	r3, [r7, #20]
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e2c:	f001 ff2e 	bl	8005c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e082      	b.n	8003f3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff10 	bl	8004c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e48:	f001 ff20 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e4c:	f000 fc66 	bl	800471c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e50:	f001 feea 	bl	8005c28 <vPortEnterCritical>
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d103      	bne.n	8003e6a <xQueueSemaphoreTake+0x142>
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d103      	bne.n	8003e80 <xQueueSemaphoreTake+0x158>
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e80:	f001 ff04 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e84:	463a      	mov	r2, r7
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 feff 	bl	8004c90 <xTaskCheckForTimeOut>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d132      	bne.n	8003efe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e9a:	f000 f94f 	bl	800413c <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d026      	beq.n	8003ef2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003eac:	f001 febc 	bl	8005c28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f865 	bl	8004f84 <xTaskPriorityInherit>
 8003eba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003ebc:	f001 fee6 	bl	8005c8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	3324      	adds	r3, #36	@ 0x24
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe15 	bl	8004af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ece:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ed0:	f000 f8e2 	bl	8004098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed4:	f000 fc30 	bl	8004738 <xTaskResumeAll>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f af67 	bne.w	8003dae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003ee0:	4b18      	ldr	r3, [pc, #96]	@ (8003f44 <xQueueSemaphoreTake+0x21c>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	e75d      	b.n	8003dae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ef4:	f000 f8d0 	bl	8004098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef8:	f000 fc1e 	bl	8004738 <xTaskResumeAll>
 8003efc:	e757      	b.n	8003dae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003efe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f00:	f000 f8ca 	bl	8004098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f04:	f000 fc18 	bl	8004738 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f0a:	f000 f917 	bl	800413c <prvIsQueueEmpty>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f43f af4c 	beq.w	8003dae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003f1c:	f001 fe84 	bl	8005c28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f22:	f000 f811 	bl	8003f48 <prvGetDisinheritPriorityAfterTimeout>
 8003f26:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f900 	bl	8005134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f34:	f001 feaa 	bl	8005c8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3738      	adds	r7, #56	@ 0x38
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e001      	b.n	8003f6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14d      	bne.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f856 	bl	8005054 <xTaskPriorityDisinherit>
 8003fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e043      	b.n	800403a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d119      	bne.n	8003fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6858      	ldr	r0, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	f002 fa08 	bl	80063d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d32b      	bcc.n	800403a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e026      	b.n	800403a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68d8      	ldr	r0, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	f002 f9ee 	bl	80063d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d207      	bcs.n	8004028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	425b      	negs	r3, r3
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d105      	bne.n	800403a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3b01      	subs	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d303      	bcc.n	8004080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68d9      	ldr	r1, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	461a      	mov	r2, r3
 800408a:	6838      	ldr	r0, [r7, #0]
 800408c:	f002 f9a4 	bl	80063d8 <memcpy>
	}
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040a0:	f001 fdc2 	bl	8005c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040ac:	e011      	b.n	80040d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3324      	adds	r3, #36	@ 0x24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fd6e 	bl	8004b9c <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040c6:	f000 fe47 	bl	8004d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	dce9      	bgt.n	80040ae <prvUnlockQueue+0x16>
 80040da:	e000      	b.n	80040de <prvUnlockQueue+0x46>
					break;
 80040dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	22ff      	movs	r2, #255	@ 0xff
 80040e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040e6:	f001 fdd1 	bl	8005c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ea:	f001 fd9d 	bl	8005c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040f6:	e011      	b.n	800411c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3310      	adds	r3, #16
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fd49 	bl	8004b9c <xTaskRemoveFromEventList>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004110:	f000 fe22 	bl	8004d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004114:	7bbb      	ldrb	r3, [r7, #14]
 8004116:	3b01      	subs	r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800411c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004120:	2b00      	cmp	r3, #0
 8004122:	dce9      	bgt.n	80040f8 <prvUnlockQueue+0x60>
 8004124:	e000      	b.n	8004128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	22ff      	movs	r2, #255	@ 0xff
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004130:	f001 fdac 	bl	8005c8c <vPortExitCritical>
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004144:	f001 fd70 	bl	8005c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e001      	b.n	800415a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800415a:	f001 fd97 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 800415e:	68fb      	ldr	r3, [r7, #12]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004170:	f001 fd5a 	bl	8005c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	429a      	cmp	r2, r3
 800417e:	d102      	bne.n	8004186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e001      	b.n	800418a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800418a:	f001 fd7f 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e014      	b.n	80041d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041a8:	4a0f      	ldr	r2, [pc, #60]	@ (80041e8 <vQueueAddToRegistry+0x50>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041b4:	490c      	ldr	r1, [pc, #48]	@ (80041e8 <vQueueAddToRegistry+0x50>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <vQueueAddToRegistry+0x50>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041ca:	e006      	b.n	80041da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b07      	cmp	r3, #7
 80041d6:	d9e7      	bls.n	80041a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	200008ac 	.word	0x200008ac

080041ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041fc:	f001 fd14 	bl	8005c28 <vPortEnterCritical>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004206:	b25b      	sxtb	r3, r3
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d103      	bne.n	8004216 <vQueueWaitForMessageRestricted+0x2a>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800421c:	b25b      	sxtb	r3, r3
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d103      	bne.n	800422c <vQueueWaitForMessageRestricted+0x40>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800422c:	f001 fd2e 	bl	8005c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3324      	adds	r3, #36	@ 0x24
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc7f 	bl	8004b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff26 	bl	8004098 <prvUnlockQueue>
	}
 800424c:	bf00      	nop
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	@ 0x38
 8004258:	af04      	add	r7, sp, #16
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61fb      	str	r3, [r7, #28]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800429e:	23a8      	movs	r3, #168	@ 0xa8
 80042a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2ba8      	cmp	r3, #168	@ 0xa8
 80042a6:	d00b      	beq.n	80042c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61bb      	str	r3, [r7, #24]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01e      	beq.n	8004306 <xTaskCreateStatic+0xb2>
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01b      	beq.n	8004306 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042e0:	2300      	movs	r3, #0
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	9302      	str	r3, [sp, #8]
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f851 	bl	80043a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004300:	f000 f8f6 	bl	80044f0 <prvAddNewTaskToReadyList>
 8004304:	e001      	b.n	800430a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800430a:	697b      	ldr	r3, [r7, #20]
	}
 800430c:	4618      	mov	r0, r3
 800430e:	3728      	adds	r7, #40	@ 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	@ 0x30
 8004318:	af04      	add	r7, sp, #16
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fd9f 	bl	8005e6c <pvPortMalloc>
 800432e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004336:	20a8      	movs	r0, #168	@ 0xa8
 8004338:	f001 fd98 	bl	8005e6c <pvPortMalloc>
 800433c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
 800434a:	e005      	b.n	8004358 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f001 fe5b 	bl	8006008 <vPortFree>
 8004352:	e001      	b.n	8004358 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	2300      	movs	r3, #0
 800436a:	9303      	str	r3, [sp, #12]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f80f 	bl	80043a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004382:	69f8      	ldr	r0, [r7, #28]
 8004384:	f000 f8b4 	bl	80044f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004388:	2301      	movs	r3, #1
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	e002      	b.n	8004394 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004394:	69bb      	ldr	r3, [r7, #24]
	}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	21a5      	movs	r1, #165	@ 0xa5
 80043ba:	f001 ff7b 	bl	80062b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c8:	3b01      	subs	r3, #1
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <prvInitialiseNewTask+0x5a>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	617b      	str	r3, [r7, #20]
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01f      	beq.n	8004440 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	e012      	b.n	800442c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	7819      	ldrb	r1, [r3, #0]
 800440e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	3334      	adds	r3, #52	@ 0x34
 8004416:	460a      	mov	r2, r1
 8004418:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d9e9      	bls.n	8004406 <prvInitialiseNewTask+0x66>
 8004432:	e000      	b.n	8004436 <prvInitialiseNewTask+0x96>
			{
				break;
 8004434:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800443e:	e003      	b.n	8004448 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	2b37      	cmp	r3, #55	@ 0x37
 800444c:	d901      	bls.n	8004452 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800444e:	2337      	movs	r3, #55	@ 0x37
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004456:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800445c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	2200      	movs	r2, #0
 8004462:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe ff49 	bl	8003300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	3318      	adds	r3, #24
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe ff44 	bl	8003300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	2200      	movs	r2, #0
 8004492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	2200      	movs	r2, #0
 800449a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	3354      	adds	r3, #84	@ 0x54
 80044a2:	224c      	movs	r2, #76	@ 0x4c
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 ff04 	bl	80062b4 <memset>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <prvInitialiseNewTask+0x144>)
 80044b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	4a0c      	ldr	r2, [pc, #48]	@ (80044e8 <prvInitialiseNewTask+0x148>)
 80044b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <prvInitialiseNewTask+0x14c>)
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	69b8      	ldr	r0, [r7, #24]
 80044c4:	f001 fa7c 	bl	80059c0 <pxPortInitialiseStack>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044da:	bf00      	nop
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20004b40 	.word	0x20004b40
 80044e8:	20004ba8 	.word	0x20004ba8
 80044ec:	20004c10 	.word	0x20004c10

080044f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044f8:	f001 fb96 	bl	8005c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044fc:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <prvAddNewTaskToReadyList+0xc4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <prvAddNewTaskToReadyList+0xc4>)
 8004504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004506:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <prvAddNewTaskToReadyList+0xc8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800450e:	4a2a      	ldr	r2, [pc, #168]	@ (80045b8 <prvAddNewTaskToReadyList+0xc8>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004514:	4b27      	ldr	r3, [pc, #156]	@ (80045b4 <prvAddNewTaskToReadyList+0xc4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d110      	bne.n	800453e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800451c:	f000 fc40 	bl	8004da0 <prvInitialiseTaskLists>
 8004520:	e00d      	b.n	800453e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004522:	4b26      	ldr	r3, [pc, #152]	@ (80045bc <prvAddNewTaskToReadyList+0xcc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800452a:	4b23      	ldr	r3, [pc, #140]	@ (80045b8 <prvAddNewTaskToReadyList+0xc8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	429a      	cmp	r2, r3
 8004536:	d802      	bhi.n	800453e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004538:	4a1f      	ldr	r2, [pc, #124]	@ (80045b8 <prvAddNewTaskToReadyList+0xc8>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800453e:	4b20      	ldr	r3, [pc, #128]	@ (80045c0 <prvAddNewTaskToReadyList+0xd0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <prvAddNewTaskToReadyList+0xd0>)
 8004546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <prvAddNewTaskToReadyList+0xd0>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004554:	4b1b      	ldr	r3, [pc, #108]	@ (80045c4 <prvAddNewTaskToReadyList+0xd4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d903      	bls.n	8004564 <prvAddNewTaskToReadyList+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <prvAddNewTaskToReadyList+0xd4>)
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4a15      	ldr	r2, [pc, #84]	@ (80045c8 <prvAddNewTaskToReadyList+0xd8>)
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fe fecd 	bl	800331a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004580:	f001 fb84 	bl	8005c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004584:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <prvAddNewTaskToReadyList+0xcc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <prvAddNewTaskToReadyList+0xc8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	429a      	cmp	r2, r3
 8004598:	d207      	bcs.n	80045aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800459a:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <prvAddNewTaskToReadyList+0xdc>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000dc0 	.word	0x20000dc0
 80045b8:	200008ec 	.word	0x200008ec
 80045bc:	20000dcc 	.word	0x20000dcc
 80045c0:	20000ddc 	.word	0x20000ddc
 80045c4:	20000dc8 	.word	0x20000dc8
 80045c8:	200008f0 	.word	0x200008f0
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d018      	beq.n	8004614 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045e2:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <vTaskDelay+0x64>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <vTaskDelay+0x32>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60bb      	str	r3, [r7, #8]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004602:	f000 f88b 	bl	800471c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fe2b 	bl	8005264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800460e:	f000 f893 	bl	8004738 <xTaskResumeAll>
 8004612:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800461a:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <vTaskDelay+0x68>)
 800461c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000de8 	.word	0x20000de8
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800464a:	463a      	mov	r2, r7
 800464c:	1d39      	adds	r1, r7, #4
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fe00 	bl	8003258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	460a      	mov	r2, r1
 800466a:	4924      	ldr	r1, [pc, #144]	@ (80046fc <vTaskStartScheduler+0xc0>)
 800466c:	4824      	ldr	r0, [pc, #144]	@ (8004700 <vTaskStartScheduler+0xc4>)
 800466e:	f7ff fdf1 	bl	8004254 <xTaskCreateStatic>
 8004672:	4603      	mov	r3, r0
 8004674:	4a23      	ldr	r2, [pc, #140]	@ (8004704 <vTaskStartScheduler+0xc8>)
 8004676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004678:	4b22      	ldr	r3, [pc, #136]	@ (8004704 <vTaskStartScheduler+0xc8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e001      	b.n	800468a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004690:	f000 fe3c 	bl	800530c <xTimerCreateTimerTask>
 8004694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d11b      	bne.n	80046d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	613b      	str	r3, [r7, #16]
}
 80046ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046b0:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <vTaskStartScheduler+0xcc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3354      	adds	r3, #84	@ 0x54
 80046b6:	4a15      	ldr	r2, [pc, #84]	@ (800470c <vTaskStartScheduler+0xd0>)
 80046b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ba:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <vTaskStartScheduler+0xd4>)
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046c2:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <vTaskStartScheduler+0xd8>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046c8:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <vTaskStartScheduler+0xdc>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046ce:	f001 fa07 	bl	8005ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046d2:	e00f      	b.n	80046f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d10b      	bne.n	80046f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60fb      	str	r3, [r7, #12]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <vTaskStartScheduler+0xb4>
}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	08006d1c 	.word	0x08006d1c
 8004700:	08004d71 	.word	0x08004d71
 8004704:	20000de4 	.word	0x20000de4
 8004708:	200008ec 	.word	0x200008ec
 800470c:	20000014 	.word	0x20000014
 8004710:	20000de0 	.word	0x20000de0
 8004714:	20000dcc 	.word	0x20000dcc
 8004718:	20000dc4 	.word	0x20000dc4

0800471c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <vTaskSuspendAll+0x18>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a03      	ldr	r2, [pc, #12]	@ (8004734 <vTaskSuspendAll+0x18>)
 8004728:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000de8 	.word	0x20000de8

08004738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004746:	4b42      	ldr	r3, [pc, #264]	@ (8004850 <xTaskResumeAll+0x118>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10b      	bne.n	8004766 <xTaskResumeAll+0x2e>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	e7fd      	b.n	8004762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004766:	f001 fa5f 	bl	8005c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800476a:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <xTaskResumeAll+0x118>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a37      	ldr	r2, [pc, #220]	@ (8004850 <xTaskResumeAll+0x118>)
 8004772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004774:	4b36      	ldr	r3, [pc, #216]	@ (8004850 <xTaskResumeAll+0x118>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d162      	bne.n	8004842 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800477c:	4b35      	ldr	r3, [pc, #212]	@ (8004854 <xTaskResumeAll+0x11c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05e      	beq.n	8004842 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004784:	e02f      	b.n	80047e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004786:	4b34      	ldr	r3, [pc, #208]	@ (8004858 <xTaskResumeAll+0x120>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3318      	adds	r3, #24
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fe1e 	bl	80033d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fe19 	bl	80033d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <xTaskResumeAll+0x124>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d903      	bls.n	80047b6 <xTaskResumeAll+0x7e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <xTaskResumeAll+0x124>)
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a27      	ldr	r2, [pc, #156]	@ (8004860 <xTaskResumeAll+0x128>)
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7fe fda4 	bl	800331a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d6:	4b23      	ldr	r3, [pc, #140]	@ (8004864 <xTaskResumeAll+0x12c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047e0:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <xTaskResumeAll+0x130>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <xTaskResumeAll+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1cb      	bne.n	8004786 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047f4:	f000 fb78 	bl	8004ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047f8:	4b1c      	ldr	r3, [pc, #112]	@ (800486c <xTaskResumeAll+0x134>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d010      	beq.n	8004826 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004804:	f000 f858 	bl	80048b8 <xTaskIncrementTick>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800480e:	4b16      	ldr	r3, [pc, #88]	@ (8004868 <xTaskResumeAll+0x130>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f1      	bne.n	8004804 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <xTaskResumeAll+0x134>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <xTaskResumeAll+0x130>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004832:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <xTaskResumeAll+0x138>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004842:	f001 fa23 	bl	8005c8c <vPortExitCritical>

	return xAlreadyYielded;
 8004846:	68bb      	ldr	r3, [r7, #8]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000de8 	.word	0x20000de8
 8004854:	20000dc0 	.word	0x20000dc0
 8004858:	20000d80 	.word	0x20000d80
 800485c:	20000dc8 	.word	0x20000dc8
 8004860:	200008f0 	.word	0x200008f0
 8004864:	200008ec 	.word	0x200008ec
 8004868:	20000dd4 	.word	0x20000dd4
 800486c:	20000dd0 	.word	0x20000dd0
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800487a:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <xTaskGetTickCount+0x1c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004880:	687b      	ldr	r3, [r7, #4]
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000dc4 	.word	0x20000dc4

08004894 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800489a:	f001 faa5 	bl	8005de8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80048a2:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <xTaskGetTickCountFromISR+0x20>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048a8:	683b      	ldr	r3, [r7, #0]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000dc4 	.word	0x20000dc4

080048b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <xTaskIncrementTick+0x148>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8090 	bne.w	80049ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a04 <xTaskIncrementTick+0x14c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a04 <xTaskIncrementTick+0x14c>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d121      	bne.n	8004924 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048e0:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <xTaskIncrementTick+0x150>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <xTaskIncrementTick+0x4a>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xTaskIncrementTick+0x46>
 8004902:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	4b40      	ldr	r3, [pc, #256]	@ (8004a0c <xTaskIncrementTick+0x154>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a08 <xTaskIncrementTick+0x150>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4a3e      	ldr	r2, [pc, #248]	@ (8004a0c <xTaskIncrementTick+0x154>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b3e      	ldr	r3, [pc, #248]	@ (8004a10 <xTaskIncrementTick+0x158>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <xTaskIncrementTick+0x158>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	f000 fae2 	bl	8004ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d349      	bcc.n	80049c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492e:	4b36      	ldr	r3, [pc, #216]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	601a      	str	r2, [r3, #0]
					break;
 8004940:	e03f      	b.n	80049c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <xTaskIncrementTick+0x150>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d203      	bcs.n	8004962 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800495a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a14 <xTaskIncrementTick+0x15c>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004960:	e02f      	b.n	80049c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3304      	adds	r3, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fd34 	bl	80033d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3318      	adds	r3, #24
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fd2b 	bl	80033d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004982:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <xTaskIncrementTick+0x160>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d903      	bls.n	8004992 <xTaskIncrementTick+0xda>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	4a22      	ldr	r2, [pc, #136]	@ (8004a18 <xTaskIncrementTick+0x160>)
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a1c <xTaskIncrementTick+0x164>)
 80049a0:	441a      	add	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7fe fcb6 	bl	800331a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <xTaskIncrementTick+0x168>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3b8      	bcc.n	800492e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c0:	e7b5      	b.n	800492e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c2:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <xTaskIncrementTick+0x168>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	4914      	ldr	r1, [pc, #80]	@ (8004a1c <xTaskIncrementTick+0x164>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d901      	bls.n	80049de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049de:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <xTaskIncrementTick+0x16c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e004      	b.n	80049f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <xTaskIncrementTick+0x170>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <xTaskIncrementTick+0x170>)
 80049f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049f6:	697b      	ldr	r3, [r7, #20]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000de8 	.word	0x20000de8
 8004a04:	20000dc4 	.word	0x20000dc4
 8004a08:	20000d78 	.word	0x20000d78
 8004a0c:	20000d7c 	.word	0x20000d7c
 8004a10:	20000dd8 	.word	0x20000dd8
 8004a14:	20000de0 	.word	0x20000de0
 8004a18:	20000dc8 	.word	0x20000dc8
 8004a1c:	200008f0 	.word	0x200008f0
 8004a20:	200008ec 	.word	0x200008ec
 8004a24:	20000dd4 	.word	0x20000dd4
 8004a28:	20000dd0 	.word	0x20000dd0

08004a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <vTaskSwitchContext+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <vTaskSwitchContext+0xb8>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a40:	e047      	b.n	8004ad2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a42:	4b28      	ldr	r3, [pc, #160]	@ (8004ae4 <vTaskSwitchContext+0xb8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b27      	ldr	r3, [pc, #156]	@ (8004ae8 <vTaskSwitchContext+0xbc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e011      	b.n	8004a74 <vTaskSwitchContext+0x48>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <vTaskSwitchContext+0x42>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	607b      	str	r3, [r7, #4]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <vTaskSwitchContext+0x3e>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	491d      	ldr	r1, [pc, #116]	@ (8004aec <vTaskSwitchContext+0xc0>)
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0e3      	beq.n	8004a50 <vTaskSwitchContext+0x24>
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <vTaskSwitchContext+0xc0>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d104      	bne.n	8004ab8 <vTaskSwitchContext+0x8c>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4a0c      	ldr	r2, [pc, #48]	@ (8004af0 <vTaskSwitchContext+0xc4>)
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <vTaskSwitchContext+0xbc>)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <vTaskSwitchContext+0xc4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3354      	adds	r3, #84	@ 0x54
 8004ace:	4a09      	ldr	r2, [pc, #36]	@ (8004af4 <vTaskSwitchContext+0xc8>)
 8004ad0:	6013      	str	r3, [r2, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000de8 	.word	0x20000de8
 8004ae4:	20000dd4 	.word	0x20000dd4
 8004ae8:	20000dc8 	.word	0x20000dc8
 8004aec:	200008f0 	.word	0x200008f0
 8004af0:	200008ec 	.word	0x200008ec
 8004af4:	20000014 	.word	0x20000014

08004af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	e7fd      	b.n	8004b1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <vTaskPlaceOnEventList+0x48>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3318      	adds	r3, #24
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fe fc1a 	bl	8003362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b2e:	2101      	movs	r1, #1
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f000 fb97 	bl	8005264 <prvAddCurrentTaskToDelayedList>
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200008ec 	.word	0x200008ec

08004b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	617b      	str	r3, [r7, #20]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3318      	adds	r3, #24
 8004b74:	4619      	mov	r1, r3
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7fe fbcf 	bl	800331a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	68b8      	ldr	r0, [r7, #8]
 8004b8c:	f000 fb6a 	bl	8005264 <prvAddCurrentTaskToDelayedList>
	}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	200008ec 	.word	0x200008ec

08004b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60fb      	str	r3, [r7, #12]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3318      	adds	r3, #24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fc00 	bl	80033d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <xTaskRemoveFromEventList+0xb0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11d      	bne.n	8004c18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fbf7 	bl	80033d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <xTaskRemoveFromEventList+0xb4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d903      	bls.n	8004bfa <xTaskRemoveFromEventList+0x5e>
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	4a16      	ldr	r2, [pc, #88]	@ (8004c50 <xTaskRemoveFromEventList+0xb4>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <xTaskRemoveFromEventList+0xb8>)
 8004c08:	441a      	add	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe fb82 	bl	800331a <vListInsertEnd>
 8004c16:	e005      	b.n	8004c24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	480e      	ldr	r0, [pc, #56]	@ (8004c58 <xTaskRemoveFromEventList+0xbc>)
 8004c20:	f7fe fb7b 	bl	800331a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <xTaskRemoveFromEventList+0xc0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d905      	bls.n	8004c3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <xTaskRemoveFromEventList+0xc4>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e001      	b.n	8004c42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c42:	697b      	ldr	r3, [r7, #20]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000de8 	.word	0x20000de8
 8004c50:	20000dc8 	.word	0x20000dc8
 8004c54:	200008f0 	.word	0x200008f0
 8004c58:	20000d80 	.word	0x20000d80
 8004c5c:	200008ec 	.word	0x200008ec
 8004c60:	20000dd4 	.word	0x20000dd4

08004c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <vTaskInternalSetTimeOutState+0x24>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <vTaskInternalSetTimeOutState+0x28>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	605a      	str	r2, [r3, #4]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	20000dd8 	.word	0x20000dd8
 8004c8c:	20000dc4 	.word	0x20000dc4

08004c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cd6:	f000 ffa7 	bl	8005c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cda:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <xTaskCheckForTimeOut+0xc0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d102      	bne.n	8004cfa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e023      	b.n	8004d42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <xTaskCheckForTimeOut+0xc4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d007      	beq.n	8004d16 <xTaskCheckForTimeOut+0x86>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e015      	b.n	8004d42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d20b      	bcs.n	8004d38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff99 	bl	8004c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e004      	b.n	8004d42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f000 ffa3 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 8004d46:	69fb      	ldr	r3, [r7, #28]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000dc4 	.word	0x20000dc4
 8004d54:	20000dd8 	.word	0x20000dd8

08004d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <vTaskMissedYield+0x14>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000dd4 	.word	0x20000dd4

08004d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d78:	f000 f852 	bl	8004e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d7c:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <prvIdleTask+0x28>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d9f9      	bls.n	8004d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <prvIdleTask+0x2c>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d94:	e7f0      	b.n	8004d78 <prvIdleTask+0x8>
 8004d96:	bf00      	nop
 8004d98:	200008f0 	.word	0x200008f0
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e00c      	b.n	8004dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <prvInitialiseTaskLists+0x60>)
 8004db8:	4413      	add	r3, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fa80 	bl	80032c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b37      	cmp	r3, #55	@ 0x37
 8004dca:	d9ef      	bls.n	8004dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dcc:	480d      	ldr	r0, [pc, #52]	@ (8004e04 <prvInitialiseTaskLists+0x64>)
 8004dce:	f7fe fa77 	bl	80032c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dd2:	480d      	ldr	r0, [pc, #52]	@ (8004e08 <prvInitialiseTaskLists+0x68>)
 8004dd4:	f7fe fa74 	bl	80032c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dd8:	480c      	ldr	r0, [pc, #48]	@ (8004e0c <prvInitialiseTaskLists+0x6c>)
 8004dda:	f7fe fa71 	bl	80032c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dde:	480c      	ldr	r0, [pc, #48]	@ (8004e10 <prvInitialiseTaskLists+0x70>)
 8004de0:	f7fe fa6e 	bl	80032c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004de4:	480b      	ldr	r0, [pc, #44]	@ (8004e14 <prvInitialiseTaskLists+0x74>)
 8004de6:	f7fe fa6b 	bl	80032c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <prvInitialiseTaskLists+0x78>)
 8004dec:	4a05      	ldr	r2, [pc, #20]	@ (8004e04 <prvInitialiseTaskLists+0x64>)
 8004dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <prvInitialiseTaskLists+0x7c>)
 8004df2:	4a05      	ldr	r2, [pc, #20]	@ (8004e08 <prvInitialiseTaskLists+0x68>)
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200008f0 	.word	0x200008f0
 8004e04:	20000d50 	.word	0x20000d50
 8004e08:	20000d64 	.word	0x20000d64
 8004e0c:	20000d80 	.word	0x20000d80
 8004e10:	20000d94 	.word	0x20000d94
 8004e14:	20000dac 	.word	0x20000dac
 8004e18:	20000d78 	.word	0x20000d78
 8004e1c:	20000d7c 	.word	0x20000d7c

08004e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e26:	e019      	b.n	8004e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e28:	f000 fefe 	bl	8005c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2c:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <prvCheckTasksWaitingTermination+0x50>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe facb 	bl	80033d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <prvCheckTasksWaitingTermination+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	4a0b      	ldr	r2, [pc, #44]	@ (8004e74 <prvCheckTasksWaitingTermination+0x54>)
 8004e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e48:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e52:	f000 ff1b 	bl	8005c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f810 	bl	8004e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e1      	bne.n	8004e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000d94 	.word	0x20000d94
 8004e74:	20000dc0 	.word	0x20000dc0
 8004e78:	20000da8 	.word	0x20000da8

08004e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3354      	adds	r3, #84	@ 0x54
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fa1b 	bl	80062c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f8b3 	bl	8006008 <vPortFree>
				vPortFree( pxTCB );
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 f8b0 	bl	8006008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ea8:	e019      	b.n	8004ede <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d103      	bne.n	8004ebc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 f8a7 	bl	8006008 <vPortFree>
	}
 8004eba:	e010      	b.n	8004ede <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d00b      	beq.n	8004ede <prvDeleteTCB+0x62>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60fb      	str	r3, [r7, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <prvDeleteTCB+0x5e>
	}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eee:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f00:	e008      	b.n	8004f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a04      	ldr	r2, [pc, #16]	@ (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	20000d78 	.word	0x20000d78
 8004f24:	20000de0 	.word	0x20000de0

08004f28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004f2e:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <xTaskGetCurrentTaskHandle+0x1c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004f34:	687b      	ldr	r3, [r7, #4]
	}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	200008ec 	.word	0x200008ec

08004f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <xTaskGetSchedulerState+0x34>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f56:	2301      	movs	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e008      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5c:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <xTaskGetSchedulerState+0x38>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f64:	2302      	movs	r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e001      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6e:	687b      	ldr	r3, [r7, #4]
	}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000dcc 	.word	0x20000dcc
 8004f80:	20000de8 	.word	0x20000de8

08004f84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d051      	beq.n	800503e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <xTaskPriorityInherit+0xc4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d241      	bcs.n	800502c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	db06      	blt.n	8004fbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb0:	4b25      	ldr	r3, [pc, #148]	@ (8005048 <xTaskPriorityInherit+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6959      	ldr	r1, [r3, #20]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <xTaskPriorityInherit+0xc8>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4299      	cmp	r1, r3
 8004fd4:	d122      	bne.n	800501c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe f9fa 	bl	80033d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fe0:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <xTaskPriorityInherit+0xc4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <xTaskPriorityInherit+0xcc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d903      	bls.n	8004ffe <xTaskPriorityInherit+0x7a>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <xTaskPriorityInherit+0xcc>)
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a10      	ldr	r2, [pc, #64]	@ (800504c <xTaskPriorityInherit+0xc8>)
 800500c:	441a      	add	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7fe f980 	bl	800331a <vListInsertEnd>
 800501a:	e004      	b.n	8005026 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <xTaskPriorityInherit+0xc4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005026:	2301      	movs	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e008      	b.n	800503e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005030:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <xTaskPriorityInherit+0xc4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	429a      	cmp	r2, r3
 8005038:	d201      	bcs.n	800503e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800503e:	68fb      	ldr	r3, [r7, #12]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200008ec 	.word	0x200008ec
 800504c:	200008f0 	.word	0x200008f0
 8005050:	20000dc8 	.word	0x20000dc8

08005054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d058      	beq.n	800511c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <xTaskPriorityDisinherit+0xd4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d00b      	beq.n	800508c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60bb      	str	r3, [r7, #8]
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d02c      	beq.n	800511c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d128      	bne.n	800511c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe f980 	bl	80033d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ec:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <xTaskPriorityDisinherit+0xd8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <xTaskPriorityDisinherit+0xa8>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <xTaskPriorityDisinherit+0xd8>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <xTaskPriorityDisinherit+0xdc>)
 800510a:	441a      	add	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe f901 	bl	800331a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800511c:	697b      	ldr	r3, [r7, #20]
	}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200008ec 	.word	0x200008ec
 800512c:	20000dc8 	.word	0x20000dc8
 8005130:	200008f0 	.word	0x200008f0

08005134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d06c      	beq.n	8005226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d902      	bls.n	800517c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e002      	b.n	8005182 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	429a      	cmp	r2, r3
 800518a:	d04c      	beq.n	8005226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	429a      	cmp	r2, r3
 8005194:	d147      	bne.n	8005226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005196:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	429a      	cmp	r2, r3
 800519e:	d10b      	bne.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60bb      	str	r3, [r7, #8]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db04      	blt.n	80051d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051e6:	4413      	add	r3, r2
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d11c      	bne.n	8005226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe f8ef 	bl	80033d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d903      	bls.n	800520a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	4a0c      	ldr	r2, [pc, #48]	@ (8005238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4a07      	ldr	r2, [pc, #28]	@ (8005234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005218:	441a      	add	r2, r3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fe f87a 	bl	800331a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200008ec 	.word	0x200008ec
 8005234:	200008f0 	.word	0x200008f0
 8005238:	20000dc8 	.word	0x20000dc8

0800523c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <pvTaskIncrementMutexHeldCount+0x24>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005248:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <pvTaskIncrementMutexHeldCount+0x24>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800524e:	3201      	adds	r2, #1
 8005250:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005252:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <pvTaskIncrementMutexHeldCount+0x24>)
 8005254:	681b      	ldr	r3, [r3, #0]
	}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200008ec 	.word	0x200008ec

08005264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800526e:	4b21      	ldr	r3, [pc, #132]	@ (80052f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005274:	4b20      	ldr	r3, [pc, #128]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe f8aa 	bl	80033d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d10a      	bne.n	800529e <prvAddCurrentTaskToDelayedList+0x3a>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528e:	4b1a      	ldr	r3, [pc, #104]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4819      	ldr	r0, [pc, #100]	@ (80052fc <prvAddCurrentTaskToDelayedList+0x98>)
 8005298:	f7fe f83f 	bl	800331a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800529c:	e026      	b.n	80052ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d209      	bcs.n	80052ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b6:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b0f      	ldr	r3, [pc, #60]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7fe f84d 	bl	8003362 <vListInsert>
}
 80052c8:	e010      	b.n	80052ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe f843 	bl	8003362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d202      	bcs.n	80052ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052e6:	4a08      	ldr	r2, [pc, #32]	@ (8005308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000dc4 	.word	0x20000dc4
 80052f8:	200008ec 	.word	0x200008ec
 80052fc:	20000dac 	.word	0x20000dac
 8005300:	20000d7c 	.word	0x20000d7c
 8005304:	20000d78 	.word	0x20000d78
 8005308:	20000de0 	.word	0x20000de0

0800530c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	@ 0x28
 8005310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005316:	f000 fb13 	bl	8005940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800531a:	4b1d      	ldr	r3, [pc, #116]	@ (8005390 <xTimerCreateTimerTask+0x84>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d021      	beq.n	8005366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800532a:	1d3a      	adds	r2, r7, #4
 800532c:	f107 0108 	add.w	r1, r7, #8
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd ffa9 	bl	800328c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	9202      	str	r2, [sp, #8]
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	2302      	movs	r3, #2
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	460a      	mov	r2, r1
 800534c:	4911      	ldr	r1, [pc, #68]	@ (8005394 <xTimerCreateTimerTask+0x88>)
 800534e:	4812      	ldr	r0, [pc, #72]	@ (8005398 <xTimerCreateTimerTask+0x8c>)
 8005350:	f7fe ff80 	bl	8004254 <xTaskCreateStatic>
 8005354:	4603      	mov	r3, r0
 8005356:	4a11      	ldr	r2, [pc, #68]	@ (800539c <xTimerCreateTimerTask+0x90>)
 8005358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800535a:	4b10      	ldr	r3, [pc, #64]	@ (800539c <xTimerCreateTimerTask+0x90>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005362:	2301      	movs	r3, #1
 8005364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	613b      	str	r3, [r7, #16]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000e1c 	.word	0x20000e1c
 8005394:	08006d24 	.word	0x08006d24
 8005398:	080054d9 	.word	0x080054d9
 800539c:	20000e20 	.word	0x20000e20

080053a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	@ 0x28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053d0:	4b19      	ldr	r3, [pc, #100]	@ (8005438 <xTimerGenericCommand+0x98>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02a      	beq.n	800542e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	dc18      	bgt.n	800541c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053ea:	f7ff fdad 	bl	8004f48 <xTaskGetSchedulerState>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d109      	bne.n	8005408 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053f4:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <xTimerGenericCommand+0x98>)
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	f107 0110 	add.w	r1, r7, #16
 80053fc:	2300      	movs	r3, #0
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	f7fe fa10 	bl	8003824 <xQueueGenericSend>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24
 8005406:	e012      	b.n	800542e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <xTimerGenericCommand+0x98>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f107 0110 	add.w	r1, r7, #16
 8005410:	2300      	movs	r3, #0
 8005412:	2200      	movs	r2, #0
 8005414:	f7fe fa06 	bl	8003824 <xQueueGenericSend>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24
 800541a:	e008      	b.n	800542e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <xTimerGenericCommand+0x98>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	f107 0110 	add.w	r1, r7, #16
 8005424:	2300      	movs	r3, #0
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	f7fe fafe 	bl	8003a28 <xQueueGenericSendFromISR>
 800542c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000e1c 	.word	0x20000e1c

0800543c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005446:	4b23      	ldr	r3, [pc, #140]	@ (80054d4 <prvProcessExpiredTimer+0x98>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7fd ffbd 	bl	80033d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d023      	beq.n	80054b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	18d1      	adds	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f000 f8d5 	bl	8005624 <prvInsertTimerInActiveList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005480:	2300      	movs	r3, #0
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	2100      	movs	r1, #0
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7ff ff88 	bl	80053a0 <xTimerGenericCommand>
 8005490:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d114      	bne.n	80054c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	60fb      	str	r3, [r7, #12]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	4798      	blx	r3
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000e14 	.word	0x20000e14

080054d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f859 	bl	800559c <prvGetNextExpireTime>
 80054ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4619      	mov	r1, r3
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f805 	bl	8005500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054f6:	f000 f8d7 	bl	80056a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054fa:	bf00      	nop
 80054fc:	e7f0      	b.n	80054e0 <prvTimerTask+0x8>
	...

08005500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800550a:	f7ff f907 	bl	800471c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f866 	bl	80055e4 <prvSampleTimeNow>
 8005518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d130      	bne.n	8005582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <prvProcessTimerOrBlockTask+0x3c>
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	429a      	cmp	r2, r3
 800552c:	d806      	bhi.n	800553c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800552e:	f7ff f903 	bl	8004738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff81 	bl	800543c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800553a:	e024      	b.n	8005586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <prvProcessTimerOrBlockTask+0x90>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <prvProcessTimerOrBlockTask+0x50>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <prvProcessTimerOrBlockTask+0x52>
 8005550:	2300      	movs	r3, #0
 8005552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <prvProcessTimerOrBlockTask+0x94>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	f7fe fe43 	bl	80041ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005566:	f7ff f8e7 	bl	8004738 <xTaskResumeAll>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005570:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <prvProcessTimerOrBlockTask+0x98>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
}
 8005580:	e001      	b.n	8005586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005582:	f7ff f8d9 	bl	8004738 <xTaskResumeAll>
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000e18 	.word	0x20000e18
 8005594:	20000e1c 	.word	0x20000e1c
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055a4:	4b0e      	ldr	r3, [pc, #56]	@ (80055e0 <prvGetNextExpireTime+0x44>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <prvGetNextExpireTime+0x16>
 80055ae:	2201      	movs	r2, #1
 80055b0:	e000      	b.n	80055b4 <prvGetNextExpireTime+0x18>
 80055b2:	2200      	movs	r2, #0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c0:	4b07      	ldr	r3, [pc, #28]	@ (80055e0 <prvGetNextExpireTime+0x44>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e001      	b.n	80055d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055d0:	68fb      	ldr	r3, [r7, #12]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000e14 	.word	0x20000e14

080055e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055ec:	f7ff f942 	bl	8004874 <xTaskGetTickCount>
 80055f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <prvSampleTimeNow+0x3c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d205      	bcs.n	8005608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055fc:	f000 f93a 	bl	8005874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e002      	b.n	800560e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800560e:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <prvSampleTimeNow+0x3c>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000e24 	.word	0x20000e24

08005624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d812      	bhi.n	8005670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e01b      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800565e:	4b10      	ldr	r3, [pc, #64]	@ (80056a0 <prvInsertTimerInActiveList+0x7c>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fd fe7a 	bl	8003362 <vListInsert>
 800566e:	e012      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d206      	bcs.n	8005686 <prvInsertTimerInActiveList+0x62>
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e007      	b.n	8005696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005686:	4b07      	ldr	r3, [pc, #28]	@ (80056a4 <prvInsertTimerInActiveList+0x80>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fd fe66 	bl	8003362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005696:	697b      	ldr	r3, [r7, #20]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000e18 	.word	0x20000e18
 80056a4:	20000e14 	.word	0x20000e14

080056a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	@ 0x38
 80056ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ae:	e0ce      	b.n	800584e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da19      	bge.n	80056ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	3304      	adds	r3, #4
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	61fb      	str	r3, [r7, #28]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e0:	6850      	ldr	r0, [r2, #4]
 80056e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	4611      	mov	r1, r2
 80056e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f2c0 80ae 	blt.w	800584e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fe66 	bl	80033d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005708:	463b      	mov	r3, r7
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ff6a 	bl	80055e4 <prvSampleTimeNow>
 8005710:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b09      	cmp	r3, #9
 8005716:	f200 8097 	bhi.w	8005848 <prvProcessReceivedCommands+0x1a0>
 800571a:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <prvProcessReceivedCommands+0x78>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	080057bf 	.word	0x080057bf
 8005730:	080057d3 	.word	0x080057d3
 8005734:	0800581f 	.word	0x0800581f
 8005738:	08005749 	.word	0x08005749
 800573c:	08005749 	.word	0x08005749
 8005740:	080057bf 	.word	0x080057bf
 8005744:	080057d3 	.word	0x080057d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	18d1      	adds	r1, r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005768:	f7ff ff5c 	bl	8005624 <prvInsertTimerInActiveList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d06c      	beq.n	800584c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d061      	beq.n	800584c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	441a      	add	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	2100      	movs	r1, #0
 8005798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800579a:	f7ff fe01 	bl	80053a0 <xTimerGenericCommand>
 800579e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d152      	bne.n	800584c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	61bb      	str	r3, [r7, #24]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057d0:	e03d      	b.n	800584e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	18d1      	adds	r1, r2, r3
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005818:	f7ff ff04 	bl	8005624 <prvInsertTimerInActiveList>
					break;
 800581c:	e017      	b.n	800584e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800582c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800582e:	f000 fbeb 	bl	8006008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005832:	e00c      	b.n	800584e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	b2da      	uxtb	r2, r3
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005846:	e002      	b.n	800584e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <prvProcessReceivedCommands+0x1a6>
					break;
 800584c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <prvProcessReceivedCommands+0x1c8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1d39      	adds	r1, r7, #4
 8005854:	2200      	movs	r2, #0
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe f984 	bl	8003b64 <xQueueReceive>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	f47f af26 	bne.w	80056b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	3730      	adds	r7, #48	@ 0x30
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000e1c 	.word	0x20000e1c

08005874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800587a:	e049      	b.n	8005910 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800587c:	4b2e      	ldr	r3, [pc, #184]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b2c      	ldr	r3, [pc, #176]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3304      	adds	r3, #4
 8005894:	4618      	mov	r0, r3
 8005896:	f7fd fd9d 	bl	80033d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02f      	beq.n	8005910 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d90e      	bls.n	80058e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fd fd42 	bl	8003362 <vListInsert>
 80058de:	e017      	b.n	8005910 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058e0:	2300      	movs	r3, #0
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	2100      	movs	r1, #0
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fd58 	bl	80053a0 <xTimerGenericCommand>
 80058f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	603b      	str	r3, [r7, #0]
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005910:	4b09      	ldr	r3, [pc, #36]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1b0      	bne.n	800587c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800591a:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005920:	4b06      	ldr	r3, [pc, #24]	@ (800593c <prvSwitchTimerLists+0xc8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <prvSwitchTimerLists+0xc4>)
 8005926:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005928:	4a04      	ldr	r2, [pc, #16]	@ (800593c <prvSwitchTimerLists+0xc8>)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6013      	str	r3, [r2, #0]
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000e14 	.word	0x20000e14
 800593c:	20000e18 	.word	0x20000e18

08005940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005946:	f000 f96f 	bl	8005c28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d120      	bne.n	8005994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005952:	4814      	ldr	r0, [pc, #80]	@ (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005954:	f7fd fcb4 	bl	80032c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005958:	4813      	ldr	r0, [pc, #76]	@ (80059a8 <prvCheckForValidListAndQueue+0x68>)
 800595a:	f7fd fcb1 	bl	80032c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800595e:	4b13      	ldr	r3, [pc, #76]	@ (80059ac <prvCheckForValidListAndQueue+0x6c>)
 8005960:	4a10      	ldr	r2, [pc, #64]	@ (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005964:	4b12      	ldr	r3, [pc, #72]	@ (80059b0 <prvCheckForValidListAndQueue+0x70>)
 8005966:	4a10      	ldr	r2, [pc, #64]	@ (80059a8 <prvCheckForValidListAndQueue+0x68>)
 8005968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4b11      	ldr	r3, [pc, #68]	@ (80059b4 <prvCheckForValidListAndQueue+0x74>)
 8005970:	4a11      	ldr	r2, [pc, #68]	@ (80059b8 <prvCheckForValidListAndQueue+0x78>)
 8005972:	2110      	movs	r1, #16
 8005974:	200a      	movs	r0, #10
 8005976:	f7fd fdc1 	bl	80034fc <xQueueGenericCreateStatic>
 800597a:	4603      	mov	r3, r0
 800597c:	4a08      	ldr	r2, [pc, #32]	@ (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800597e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <prvCheckForValidListAndQueue+0x60>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	490b      	ldr	r1, [pc, #44]	@ (80059bc <prvCheckForValidListAndQueue+0x7c>)
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fc02 	bl	8004198 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005994:	f000 f97a 	bl	8005c8c <vPortExitCritical>
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000e1c 	.word	0x20000e1c
 80059a4:	20000dec 	.word	0x20000dec
 80059a8:	20000e00 	.word	0x20000e00
 80059ac:	20000e14 	.word	0x20000e14
 80059b0:	20000e18 	.word	0x20000e18
 80059b4:	20000ec8 	.word	0x20000ec8
 80059b8:	20000e28 	.word	0x20000e28
 80059bc:	08006d2c 	.word	0x08006d2c

080059c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <pxPortInitialiseStack+0x64>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b14      	subs	r3, #20
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f06f 0202 	mvn.w	r2, #2
 8005a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b20      	subs	r3, #32
 8005a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	08005a29 	.word	0x08005a29

08005a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a32:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <prvTaskExitError+0x58>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d00b      	beq.n	8005a54 <prvTaskExitError+0x2c>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <prvTaskExitError+0x28>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60bb      	str	r3, [r7, #8]
}
 8005a66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a68:	bf00      	nop
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0fc      	beq.n	8005a6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000010 	.word	0x20000010
	...

08005a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <pxCurrentTCBConst2>)
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	6808      	ldr	r0, [r1, #0]
 8005a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	f380 8809 	msr	PSP, r0
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8811 	msr	BASEPRI, r0
 8005aaa:	4770      	bx	lr
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst2>:
 8005ab0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ab8:	4808      	ldr	r0, [pc, #32]	@ (8005adc <prvPortStartFirstTask+0x24>)
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f380 8808 	msr	MSP, r0
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f380 8814 	msr	CONTROL, r0
 8005aca:	b662      	cpsie	i
 8005acc:	b661      	cpsie	f
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	df00      	svc	0
 8005ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ada:	bf00      	nop
 8005adc:	e000ed08 	.word	0xe000ed08

08005ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ae6:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <xPortStartScheduler+0x124>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a47      	ldr	r2, [pc, #284]	@ (8005c08 <xPortStartScheduler+0x128>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d10b      	bne.n	8005b08 <xPortStartScheduler+0x28>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b08:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <xPortStartScheduler+0x124>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c0c <xPortStartScheduler+0x12c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10b      	bne.n	8005b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	613b      	str	r3, [r7, #16]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b2a:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <xPortStartScheduler+0x130>)
 8005b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	22ff      	movs	r2, #255	@ 0xff
 8005b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <xPortStartScheduler+0x134>)
 8005b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b52:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b58:	e009      	b.n	8005b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b80      	cmp	r3, #128	@ 0x80
 8005b78:	d0ef      	beq.n	8005b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b7a:	4b27      	ldr	r3, [pc, #156]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1c3 0307 	rsb	r3, r3, #7
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d00b      	beq.n	8005b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60bb      	str	r3, [r7, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	e7fd      	b.n	8005b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bbc:	4b17      	ldr	r3, [pc, #92]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bc8:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bd4:	f000 f8da 	bl	8005d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <xPortStartScheduler+0x140>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bde:	f000 f8f9 	bl	8005dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <xPortStartScheduler+0x144>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a0f      	ldr	r2, [pc, #60]	@ (8005c24 <xPortStartScheduler+0x144>)
 8005be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bee:	f7ff ff63 	bl	8005ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf2:	f7fe ff1b 	bl	8004a2c <vTaskSwitchContext>
	prvTaskExitError();
 8005bf6:	f7ff ff17 	bl	8005a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	e000ed00 	.word	0xe000ed00
 8005c08:	410fc271 	.word	0x410fc271
 8005c0c:	410fc270 	.word	0x410fc270
 8005c10:	e000e400 	.word	0xe000e400
 8005c14:	20000f18 	.word	0x20000f18
 8005c18:	20000f1c 	.word	0x20000f1c
 8005c1c:	e000ed20 	.word	0xe000ed20
 8005c20:	20000010 	.word	0x20000010
 8005c24:	e000ef34 	.word	0xe000ef34

08005c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a0e      	ldr	r2, [pc, #56]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d110      	bne.n	8005c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c54:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <vPortEnterCritical+0x60>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	603b      	str	r3, [r7, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vPortEnterCritical+0x4a>
	}
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000010 	.word	0x20000010
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c92:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <vPortExitCritical+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <vPortExitCritical+0x26>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	e7fd      	b.n	8005cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <vPortExitCritical+0x44>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000010 	.word	0x20000010

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b15      	ldr	r3, [pc, #84]	@ (8005d40 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f01e 0f10 	tst.w	lr, #16
 8005cf0:	bf08      	it	eq
 8005cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d04:	f380 8811 	msr	BASEPRI, r0
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f7fe fe8c 	bl	8004a2c <vTaskSwitchContext>
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f380 8811 	msr	BASEPRI, r0
 8005d1c:	bc09      	pop	{r0, r3}
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d26:	f01e 0f10 	tst.w	lr, #16
 8005d2a:	bf08      	it	eq
 8005d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d30:	f380 8809 	msr	PSP, r0
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst>:
 8005d40:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
}
 8005d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d62:	f7fe fda9 	bl	80048b8 <xTaskIncrementTick>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <xPortSysTickHandler+0x40>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <vPortSetupTimerInterrupt+0x38>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <vPortSetupTimerInterrupt+0x3c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <vPortSetupTimerInterrupt+0x40>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <vPortSetupTimerInterrupt+0x44>)
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005db0:	2207      	movs	r2, #7
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e010 	.word	0xe000e010
 8005dc4:	e000e018 	.word	0xe000e018
 8005dc8:	20000004 	.word	0x20000004
 8005dcc:	10624dd3 	.word	0x10624dd3
 8005dd0:	e000e014 	.word	0xe000e014

08005dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005de4 <vPortEnableVFP+0x10>
 8005dd8:	6801      	ldr	r1, [r0, #0]
 8005dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005dde:	6001      	str	r1, [r0, #0]
 8005de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005de2:	bf00      	nop
 8005de4:	e000ed88 	.word	0xe000ed88

08005de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dee:	f3ef 8305 	mrs	r3, IPSR
 8005df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d915      	bls.n	8005e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <vPortValidateInterruptPriority+0x74>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e04:	4b16      	ldr	r3, [pc, #88]	@ (8005e60 <vPortValidateInterruptPriority+0x78>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	7afa      	ldrb	r2, [r7, #11]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d20b      	bcs.n	8005e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e26:	4b0f      	ldr	r3, [pc, #60]	@ (8005e64 <vPortValidateInterruptPriority+0x7c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e68 <vPortValidateInterruptPriority+0x80>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d90b      	bls.n	8005e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	603b      	str	r3, [r7, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortValidateInterruptPriority+0x62>
	}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000e3f0 	.word	0xe000e3f0
 8005e60:	20000f18 	.word	0x20000f18
 8005e64:	e000ed0c 	.word	0xe000ed0c
 8005e68:	20000f1c 	.word	0x20000f1c

08005e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	@ 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e78:	f7fe fc50 	bl	800471c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e84:	f000 f924 	bl	80060d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e88:	4b5a      	ldr	r3, [pc, #360]	@ (8005ff4 <pvPortMalloc+0x188>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8095 	bne.w	8005fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d015      	beq.n	8005eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <pvPortMalloc+0x6e>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	617b      	str	r3, [r7, #20]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d06f      	beq.n	8005fc0 <pvPortMalloc+0x154>
 8005ee0:	4b45      	ldr	r3, [pc, #276]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d86a      	bhi.n	8005fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eea:	4b44      	ldr	r3, [pc, #272]	@ (8005ffc <pvPortMalloc+0x190>)
 8005eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005eee:	4b43      	ldr	r3, [pc, #268]	@ (8005ffc <pvPortMalloc+0x190>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef4:	e004      	b.n	8005f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <pvPortMalloc+0xa6>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f1      	bne.n	8005ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f12:	4b37      	ldr	r3, [pc, #220]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d051      	beq.n	8005fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2208      	movs	r2, #8
 8005f22:	4413      	add	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	2308      	movs	r3, #8
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d920      	bls.n	8005f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <pvPortMalloc+0xfc>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f7a:	69b8      	ldr	r0, [r7, #24]
 8005f7c:	f000 f90a 	bl	8006194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f80:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <pvPortMalloc+0x194>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d203      	bcs.n	8005fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a18      	ldr	r2, [pc, #96]	@ (8006000 <pvPortMalloc+0x194>)
 8005fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b13      	ldr	r3, [pc, #76]	@ (8005ff4 <pvPortMalloc+0x188>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fb6:	4b13      	ldr	r3, [pc, #76]	@ (8006004 <pvPortMalloc+0x198>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a11      	ldr	r2, [pc, #68]	@ (8006004 <pvPortMalloc+0x198>)
 8005fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fc0:	f7fe fbba 	bl	8004738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	60fb      	str	r3, [r7, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3728      	adds	r7, #40	@ 0x28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20004b28 	.word	0x20004b28
 8005ff4:	20004b3c 	.word	0x20004b3c
 8005ff8:	20004b2c 	.word	0x20004b2c
 8005ffc:	20004b20 	.word	0x20004b20
 8006000:	20004b30 	.word	0x20004b30
 8006004:	20004b34 	.word	0x20004b34

08006008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04f      	beq.n	80060ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800601a:	2308      	movs	r3, #8
 800601c:	425b      	negs	r3, r3
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4b25      	ldr	r3, [pc, #148]	@ (80060c4 <vPortFree+0xbc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <vPortFree+0x46>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	60fb      	str	r3, [r7, #12]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <vPortFree+0x66>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <vPortFree+0xbc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01e      	beq.n	80060ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11a      	bne.n	80060ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <vPortFree+0xbc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	43db      	mvns	r3, r3
 800608e:	401a      	ands	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006094:	f7fe fb42 	bl	800471c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <vPortFree+0xc0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4413      	add	r3, r2
 80060a2:	4a09      	ldr	r2, [pc, #36]	@ (80060c8 <vPortFree+0xc0>)
 80060a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060a6:	6938      	ldr	r0, [r7, #16]
 80060a8:	f000 f874 	bl	8006194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060ac:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <vPortFree+0xc4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a06      	ldr	r2, [pc, #24]	@ (80060cc <vPortFree+0xc4>)
 80060b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060b6:	f7fe fb3f 	bl	8004738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20004b3c 	.word	0x20004b3c
 80060c8:	20004b2c 	.word	0x20004b2c
 80060cc:	20004b38 	.word	0x20004b38

080060d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80060da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060dc:	4b27      	ldr	r3, [pc, #156]	@ (800617c <prvHeapInit+0xac>)
 80060de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3307      	adds	r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	4a1f      	ldr	r2, [pc, #124]	@ (800617c <prvHeapInit+0xac>)
 8006100:	4413      	add	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006108:	4a1d      	ldr	r2, [pc, #116]	@ (8006180 <prvHeapInit+0xb0>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800610e:	4b1c      	ldr	r3, [pc, #112]	@ (8006180 <prvHeapInit+0xb0>)
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800611c:	2208      	movs	r2, #8
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a15      	ldr	r2, [pc, #84]	@ (8006184 <prvHeapInit+0xb4>)
 8006130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <prvHeapInit+0xb4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800613a:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <prvHeapInit+0xb4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <prvHeapInit+0xb4>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <prvHeapInit+0xb8>)
 800615e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a09      	ldr	r2, [pc, #36]	@ (800618c <prvHeapInit+0xbc>)
 8006166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <prvHeapInit+0xc0>)
 800616a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800616e:	601a      	str	r2, [r3, #0]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20000f20 	.word	0x20000f20
 8006180:	20004b20 	.word	0x20004b20
 8006184:	20004b28 	.word	0x20004b28
 8006188:	20004b30 	.word	0x20004b30
 800618c:	20004b2c 	.word	0x20004b2c
 8006190:	20004b3c 	.word	0x20004b3c

08006194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800619c:	4b28      	ldr	r3, [pc, #160]	@ (8006240 <prvInsertBlockIntoFreeList+0xac>)
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e002      	b.n	80061a8 <prvInsertBlockIntoFreeList+0x14>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d8f7      	bhi.n	80061a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d108      	bne.n	80061d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d118      	bne.n	800621c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b15      	ldr	r3, [pc, #84]	@ (8006244 <prvInsertBlockIntoFreeList+0xb0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d00d      	beq.n	8006212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e008      	b.n	8006224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006212:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <prvInsertBlockIntoFreeList+0xb0>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e003      	b.n	8006224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d002      	beq.n	8006232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20004b20 	.word	0x20004b20
 8006244:	20004b28 	.word	0x20004b28

08006248 <sniprintf>:
 8006248:	b40c      	push	{r2, r3}
 800624a:	b530      	push	{r4, r5, lr}
 800624c:	4b18      	ldr	r3, [pc, #96]	@ (80062b0 <sniprintf+0x68>)
 800624e:	1e0c      	subs	r4, r1, #0
 8006250:	681d      	ldr	r5, [r3, #0]
 8006252:	b09d      	sub	sp, #116	@ 0x74
 8006254:	da08      	bge.n	8006268 <sniprintf+0x20>
 8006256:	238b      	movs	r3, #139	@ 0x8b
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	b01d      	add	sp, #116	@ 0x74
 8006260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006264:	b002      	add	sp, #8
 8006266:	4770      	bx	lr
 8006268:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800626c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006276:	bf14      	ite	ne
 8006278:	f104 33ff 	addne.w	r3, r4, #4294967295
 800627c:	4623      	moveq	r3, r4
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	9307      	str	r3, [sp, #28]
 8006282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006286:	9002      	str	r0, [sp, #8]
 8006288:	9006      	str	r0, [sp, #24]
 800628a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800628e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006290:	ab21      	add	r3, sp, #132	@ 0x84
 8006292:	a902      	add	r1, sp, #8
 8006294:	4628      	mov	r0, r5
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	f000 fa00 	bl	800669c <_svfiprintf_r>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	bfbc      	itt	lt
 80062a0:	238b      	movlt	r3, #139	@ 0x8b
 80062a2:	602b      	strlt	r3, [r5, #0]
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d0da      	beq.n	800625e <sniprintf+0x16>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e7d6      	b.n	800625e <sniprintf+0x16>
 80062b0:	20000014 	.word	0x20000014

080062b4 <memset>:
 80062b4:	4402      	add	r2, r0
 80062b6:	4603      	mov	r3, r0
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	f803 1b01 	strb.w	r1, [r3], #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <_reclaim_reent>:
 80062c4:	4b2d      	ldr	r3, [pc, #180]	@ (800637c <_reclaim_reent+0xb8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4283      	cmp	r3, r0
 80062ca:	b570      	push	{r4, r5, r6, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	d053      	beq.n	8006378 <_reclaim_reent+0xb4>
 80062d0:	69c3      	ldr	r3, [r0, #28]
 80062d2:	b31b      	cbz	r3, 800631c <_reclaim_reent+0x58>
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	b163      	cbz	r3, 80062f2 <_reclaim_reent+0x2e>
 80062d8:	2500      	movs	r5, #0
 80062da:	69e3      	ldr	r3, [r4, #28]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	5959      	ldr	r1, [r3, r5]
 80062e0:	b9b1      	cbnz	r1, 8006310 <_reclaim_reent+0x4c>
 80062e2:	3504      	adds	r5, #4
 80062e4:	2d80      	cmp	r5, #128	@ 0x80
 80062e6:	d1f8      	bne.n	80062da <_reclaim_reent+0x16>
 80062e8:	69e3      	ldr	r3, [r4, #28]
 80062ea:	4620      	mov	r0, r4
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	f000 f881 	bl	80063f4 <_free_r>
 80062f2:	69e3      	ldr	r3, [r4, #28]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	b111      	cbz	r1, 80062fe <_reclaim_reent+0x3a>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 f87b 	bl	80063f4 <_free_r>
 80062fe:	69e3      	ldr	r3, [r4, #28]
 8006300:	689d      	ldr	r5, [r3, #8]
 8006302:	b15d      	cbz	r5, 800631c <_reclaim_reent+0x58>
 8006304:	4629      	mov	r1, r5
 8006306:	4620      	mov	r0, r4
 8006308:	682d      	ldr	r5, [r5, #0]
 800630a:	f000 f873 	bl	80063f4 <_free_r>
 800630e:	e7f8      	b.n	8006302 <_reclaim_reent+0x3e>
 8006310:	680e      	ldr	r6, [r1, #0]
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f86e 	bl	80063f4 <_free_r>
 8006318:	4631      	mov	r1, r6
 800631a:	e7e1      	b.n	80062e0 <_reclaim_reent+0x1c>
 800631c:	6961      	ldr	r1, [r4, #20]
 800631e:	b111      	cbz	r1, 8006326 <_reclaim_reent+0x62>
 8006320:	4620      	mov	r0, r4
 8006322:	f000 f867 	bl	80063f4 <_free_r>
 8006326:	69e1      	ldr	r1, [r4, #28]
 8006328:	b111      	cbz	r1, 8006330 <_reclaim_reent+0x6c>
 800632a:	4620      	mov	r0, r4
 800632c:	f000 f862 	bl	80063f4 <_free_r>
 8006330:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006332:	b111      	cbz	r1, 800633a <_reclaim_reent+0x76>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f85d 	bl	80063f4 <_free_r>
 800633a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633c:	b111      	cbz	r1, 8006344 <_reclaim_reent+0x80>
 800633e:	4620      	mov	r0, r4
 8006340:	f000 f858 	bl	80063f4 <_free_r>
 8006344:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006346:	b111      	cbz	r1, 800634e <_reclaim_reent+0x8a>
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f853 	bl	80063f4 <_free_r>
 800634e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006350:	b111      	cbz	r1, 8006358 <_reclaim_reent+0x94>
 8006352:	4620      	mov	r0, r4
 8006354:	f000 f84e 	bl	80063f4 <_free_r>
 8006358:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800635a:	b111      	cbz	r1, 8006362 <_reclaim_reent+0x9e>
 800635c:	4620      	mov	r0, r4
 800635e:	f000 f849 	bl	80063f4 <_free_r>
 8006362:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006364:	b111      	cbz	r1, 800636c <_reclaim_reent+0xa8>
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f844 	bl	80063f4 <_free_r>
 800636c:	6a23      	ldr	r3, [r4, #32]
 800636e:	b11b      	cbz	r3, 8006378 <_reclaim_reent+0xb4>
 8006370:	4620      	mov	r0, r4
 8006372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006376:	4718      	bx	r3
 8006378:	bd70      	pop	{r4, r5, r6, pc}
 800637a:	bf00      	nop
 800637c:	20000014 	.word	0x20000014

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	@ (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000014 	.word	0x20000014

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	@ (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	@ (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	@ (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	@ (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 fc64 	bl	8006c6c <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08006e04 	.word	0x08006e04
 80063c8:	08006e04 	.word	0x08006e04
 80063cc:	08006e04 	.word	0x08006e04
 80063d0:	08006e08 	.word	0x08006e08

080063d4 <__retarget_lock_acquire_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_release_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <memcpy>:
 80063d8:	440a      	add	r2, r1
 80063da:	4291      	cmp	r1, r2
 80063dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e0:	d100      	bne.n	80063e4 <memcpy+0xc>
 80063e2:	4770      	bx	lr
 80063e4:	b510      	push	{r4, lr}
 80063e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ee:	4291      	cmp	r1, r2
 80063f0:	d1f9      	bne.n	80063e6 <memcpy+0xe>
 80063f2:	bd10      	pop	{r4, pc}

080063f4 <_free_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4605      	mov	r5, r0
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d041      	beq.n	8006480 <_free_r+0x8c>
 80063fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006400:	1f0c      	subs	r4, r1, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfb8      	it	lt
 8006406:	18e4      	addlt	r4, r4, r3
 8006408:	f000 f8e0 	bl	80065cc <__malloc_lock>
 800640c:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <_free_r+0x90>)
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	b933      	cbnz	r3, 8006420 <_free_r+0x2c>
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	6014      	str	r4, [r2, #0]
 8006416:	4628      	mov	r0, r5
 8006418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641c:	f000 b8dc 	b.w	80065d8 <__malloc_unlock>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d908      	bls.n	8006436 <_free_r+0x42>
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	1821      	adds	r1, r4, r0
 8006428:	428b      	cmp	r3, r1
 800642a:	bf01      	itttt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	1809      	addeq	r1, r1, r0
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	e7ed      	b.n	8006412 <_free_r+0x1e>
 8006436:	461a      	mov	r2, r3
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b10b      	cbz	r3, 8006440 <_free_r+0x4c>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d9fa      	bls.n	8006436 <_free_r+0x42>
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	1850      	adds	r0, r2, r1
 8006444:	42a0      	cmp	r0, r4
 8006446:	d10b      	bne.n	8006460 <_free_r+0x6c>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	4401      	add	r1, r0
 800644c:	1850      	adds	r0, r2, r1
 800644e:	4283      	cmp	r3, r0
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	d1e0      	bne.n	8006416 <_free_r+0x22>
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	4408      	add	r0, r1
 800645c:	6010      	str	r0, [r2, #0]
 800645e:	e7da      	b.n	8006416 <_free_r+0x22>
 8006460:	d902      	bls.n	8006468 <_free_r+0x74>
 8006462:	230c      	movs	r3, #12
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	e7d6      	b.n	8006416 <_free_r+0x22>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	1821      	adds	r1, r4, r0
 800646c:	428b      	cmp	r3, r1
 800646e:	bf04      	itt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	bf04      	itt	eq
 8006478:	1809      	addeq	r1, r1, r0
 800647a:	6021      	streq	r1, [r4, #0]
 800647c:	6054      	str	r4, [r2, #4]
 800647e:	e7ca      	b.n	8006416 <_free_r+0x22>
 8006480:	bd38      	pop	{r3, r4, r5, pc}
 8006482:	bf00      	nop
 8006484:	20004c84 	.word	0x20004c84

08006488 <sbrk_aligned>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0f      	ldr	r6, [pc, #60]	@ (80064c8 <sbrk_aligned+0x40>)
 800648c:	460c      	mov	r4, r1
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	4605      	mov	r5, r0
 8006492:	b911      	cbnz	r1, 800649a <sbrk_aligned+0x12>
 8006494:	f000 fba4 	bl	8006be0 <_sbrk_r>
 8006498:	6030      	str	r0, [r6, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 fb9f 	bl	8006be0 <_sbrk_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d103      	bne.n	80064ae <sbrk_aligned+0x26>
 80064a6:	f04f 34ff 	mov.w	r4, #4294967295
 80064aa:	4620      	mov	r0, r4
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	1cc4      	adds	r4, r0, #3
 80064b0:	f024 0403 	bic.w	r4, r4, #3
 80064b4:	42a0      	cmp	r0, r4
 80064b6:	d0f8      	beq.n	80064aa <sbrk_aligned+0x22>
 80064b8:	1a21      	subs	r1, r4, r0
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 fb90 	bl	8006be0 <_sbrk_r>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d1f2      	bne.n	80064aa <sbrk_aligned+0x22>
 80064c4:	e7ef      	b.n	80064a6 <sbrk_aligned+0x1e>
 80064c6:	bf00      	nop
 80064c8:	20004c80 	.word	0x20004c80

080064cc <_malloc_r>:
 80064cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	1ccd      	adds	r5, r1, #3
 80064d2:	f025 0503 	bic.w	r5, r5, #3
 80064d6:	3508      	adds	r5, #8
 80064d8:	2d0c      	cmp	r5, #12
 80064da:	bf38      	it	cc
 80064dc:	250c      	movcc	r5, #12
 80064de:	2d00      	cmp	r5, #0
 80064e0:	4606      	mov	r6, r0
 80064e2:	db01      	blt.n	80064e8 <_malloc_r+0x1c>
 80064e4:	42a9      	cmp	r1, r5
 80064e6:	d904      	bls.n	80064f2 <_malloc_r+0x26>
 80064e8:	230c      	movs	r3, #12
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	2000      	movs	r0, #0
 80064ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065c8 <_malloc_r+0xfc>
 80064f6:	f000 f869 	bl	80065cc <__malloc_lock>
 80064fa:	f8d8 3000 	ldr.w	r3, [r8]
 80064fe:	461c      	mov	r4, r3
 8006500:	bb44      	cbnz	r4, 8006554 <_malloc_r+0x88>
 8006502:	4629      	mov	r1, r5
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff ffbf 	bl	8006488 <sbrk_aligned>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	4604      	mov	r4, r0
 800650e:	d158      	bne.n	80065c2 <_malloc_r+0xf6>
 8006510:	f8d8 4000 	ldr.w	r4, [r8]
 8006514:	4627      	mov	r7, r4
 8006516:	2f00      	cmp	r7, #0
 8006518:	d143      	bne.n	80065a2 <_malloc_r+0xd6>
 800651a:	2c00      	cmp	r4, #0
 800651c:	d04b      	beq.n	80065b6 <_malloc_r+0xea>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	4639      	mov	r1, r7
 8006522:	4630      	mov	r0, r6
 8006524:	eb04 0903 	add.w	r9, r4, r3
 8006528:	f000 fb5a 	bl	8006be0 <_sbrk_r>
 800652c:	4581      	cmp	r9, r0
 800652e:	d142      	bne.n	80065b6 <_malloc_r+0xea>
 8006530:	6821      	ldr	r1, [r4, #0]
 8006532:	1a6d      	subs	r5, r5, r1
 8006534:	4629      	mov	r1, r5
 8006536:	4630      	mov	r0, r6
 8006538:	f7ff ffa6 	bl	8006488 <sbrk_aligned>
 800653c:	3001      	adds	r0, #1
 800653e:	d03a      	beq.n	80065b6 <_malloc_r+0xea>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	442b      	add	r3, r5
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	f8d8 3000 	ldr.w	r3, [r8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	bb62      	cbnz	r2, 80065a8 <_malloc_r+0xdc>
 800654e:	f8c8 7000 	str.w	r7, [r8]
 8006552:	e00f      	b.n	8006574 <_malloc_r+0xa8>
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	1b52      	subs	r2, r2, r5
 8006558:	d420      	bmi.n	800659c <_malloc_r+0xd0>
 800655a:	2a0b      	cmp	r2, #11
 800655c:	d917      	bls.n	800658e <_malloc_r+0xc2>
 800655e:	1961      	adds	r1, r4, r5
 8006560:	42a3      	cmp	r3, r4
 8006562:	6025      	str	r5, [r4, #0]
 8006564:	bf18      	it	ne
 8006566:	6059      	strne	r1, [r3, #4]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	bf08      	it	eq
 800656c:	f8c8 1000 	streq.w	r1, [r8]
 8006570:	5162      	str	r2, [r4, r5]
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	4630      	mov	r0, r6
 8006576:	f000 f82f 	bl	80065d8 <__malloc_unlock>
 800657a:	f104 000b 	add.w	r0, r4, #11
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	f020 0007 	bic.w	r0, r0, #7
 8006584:	1ac2      	subs	r2, r0, r3
 8006586:	bf1c      	itt	ne
 8006588:	1a1b      	subne	r3, r3, r0
 800658a:	50a3      	strne	r3, [r4, r2]
 800658c:	e7af      	b.n	80064ee <_malloc_r+0x22>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	bf0c      	ite	eq
 8006594:	f8c8 2000 	streq.w	r2, [r8]
 8006598:	605a      	strne	r2, [r3, #4]
 800659a:	e7eb      	b.n	8006574 <_malloc_r+0xa8>
 800659c:	4623      	mov	r3, r4
 800659e:	6864      	ldr	r4, [r4, #4]
 80065a0:	e7ae      	b.n	8006500 <_malloc_r+0x34>
 80065a2:	463c      	mov	r4, r7
 80065a4:	687f      	ldr	r7, [r7, #4]
 80065a6:	e7b6      	b.n	8006516 <_malloc_r+0x4a>
 80065a8:	461a      	mov	r2, r3
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d1fb      	bne.n	80065a8 <_malloc_r+0xdc>
 80065b0:	2300      	movs	r3, #0
 80065b2:	6053      	str	r3, [r2, #4]
 80065b4:	e7de      	b.n	8006574 <_malloc_r+0xa8>
 80065b6:	230c      	movs	r3, #12
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	4630      	mov	r0, r6
 80065bc:	f000 f80c 	bl	80065d8 <__malloc_unlock>
 80065c0:	e794      	b.n	80064ec <_malloc_r+0x20>
 80065c2:	6005      	str	r5, [r0, #0]
 80065c4:	e7d6      	b.n	8006574 <_malloc_r+0xa8>
 80065c6:	bf00      	nop
 80065c8:	20004c84 	.word	0x20004c84

080065cc <__malloc_lock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	@ (80065d4 <__malloc_lock+0x8>)
 80065ce:	f7ff bf01 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20004c7c 	.word	0x20004c7c

080065d8 <__malloc_unlock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	@ (80065e0 <__malloc_unlock+0x8>)
 80065da:	f7ff befc 	b.w	80063d6 <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20004c7c 	.word	0x20004c7c

080065e4 <__ssputs_r>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	688e      	ldr	r6, [r1, #8]
 80065ea:	461f      	mov	r7, r3
 80065ec:	42be      	cmp	r6, r7
 80065ee:	680b      	ldr	r3, [r1, #0]
 80065f0:	4682      	mov	sl, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4690      	mov	r8, r2
 80065f6:	d82d      	bhi.n	8006654 <__ssputs_r+0x70>
 80065f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006600:	d026      	beq.n	8006650 <__ssputs_r+0x6c>
 8006602:	6965      	ldr	r5, [r4, #20]
 8006604:	6909      	ldr	r1, [r1, #16]
 8006606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800660a:	eba3 0901 	sub.w	r9, r3, r1
 800660e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006612:	1c7b      	adds	r3, r7, #1
 8006614:	444b      	add	r3, r9
 8006616:	106d      	asrs	r5, r5, #1
 8006618:	429d      	cmp	r5, r3
 800661a:	bf38      	it	cc
 800661c:	461d      	movcc	r5, r3
 800661e:	0553      	lsls	r3, r2, #21
 8006620:	d527      	bpl.n	8006672 <__ssputs_r+0x8e>
 8006622:	4629      	mov	r1, r5
 8006624:	f7ff ff52 	bl	80064cc <_malloc_r>
 8006628:	4606      	mov	r6, r0
 800662a:	b360      	cbz	r0, 8006686 <__ssputs_r+0xa2>
 800662c:	6921      	ldr	r1, [r4, #16]
 800662e:	464a      	mov	r2, r9
 8006630:	f7ff fed2 	bl	80063d8 <memcpy>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800663a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	6126      	str	r6, [r4, #16]
 8006642:	6165      	str	r5, [r4, #20]
 8006644:	444e      	add	r6, r9
 8006646:	eba5 0509 	sub.w	r5, r5, r9
 800664a:	6026      	str	r6, [r4, #0]
 800664c:	60a5      	str	r5, [r4, #8]
 800664e:	463e      	mov	r6, r7
 8006650:	42be      	cmp	r6, r7
 8006652:	d900      	bls.n	8006656 <__ssputs_r+0x72>
 8006654:	463e      	mov	r6, r7
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	4632      	mov	r2, r6
 800665a:	4641      	mov	r1, r8
 800665c:	f000 faa6 	bl	8006bac <memmove>
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	1b9b      	subs	r3, r3, r6
 8006664:	60a3      	str	r3, [r4, #8]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	4433      	add	r3, r6
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	2000      	movs	r0, #0
 800666e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006672:	462a      	mov	r2, r5
 8006674:	f000 fac4 	bl	8006c00 <_realloc_r>
 8006678:	4606      	mov	r6, r0
 800667a:	2800      	cmp	r0, #0
 800667c:	d1e0      	bne.n	8006640 <__ssputs_r+0x5c>
 800667e:	6921      	ldr	r1, [r4, #16]
 8006680:	4650      	mov	r0, sl
 8006682:	f7ff feb7 	bl	80063f4 <_free_r>
 8006686:	230c      	movs	r3, #12
 8006688:	f8ca 3000 	str.w	r3, [sl]
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	e7e9      	b.n	800666e <__ssputs_r+0x8a>
	...

0800669c <_svfiprintf_r>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	4698      	mov	r8, r3
 80066a2:	898b      	ldrh	r3, [r1, #12]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	b09d      	sub	sp, #116	@ 0x74
 80066a8:	4607      	mov	r7, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	d510      	bpl.n	80066d2 <_svfiprintf_r+0x36>
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	b973      	cbnz	r3, 80066d2 <_svfiprintf_r+0x36>
 80066b4:	2140      	movs	r1, #64	@ 0x40
 80066b6:	f7ff ff09 	bl	80064cc <_malloc_r>
 80066ba:	6028      	str	r0, [r5, #0]
 80066bc:	6128      	str	r0, [r5, #16]
 80066be:	b930      	cbnz	r0, 80066ce <_svfiprintf_r+0x32>
 80066c0:	230c      	movs	r3, #12
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	b01d      	add	sp, #116	@ 0x74
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	2340      	movs	r3, #64	@ 0x40
 80066d0:	616b      	str	r3, [r5, #20]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	2320      	movs	r3, #32
 80066d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e0:	2330      	movs	r3, #48	@ 0x30
 80066e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006880 <_svfiprintf_r+0x1e4>
 80066e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ea:	f04f 0901 	mov.w	r9, #1
 80066ee:	4623      	mov	r3, r4
 80066f0:	469a      	mov	sl, r3
 80066f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f6:	b10a      	cbz	r2, 80066fc <_svfiprintf_r+0x60>
 80066f8:	2a25      	cmp	r2, #37	@ 0x25
 80066fa:	d1f9      	bne.n	80066f0 <_svfiprintf_r+0x54>
 80066fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006700:	d00b      	beq.n	800671a <_svfiprintf_r+0x7e>
 8006702:	465b      	mov	r3, fp
 8006704:	4622      	mov	r2, r4
 8006706:	4629      	mov	r1, r5
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ff6b 	bl	80065e4 <__ssputs_r>
 800670e:	3001      	adds	r0, #1
 8006710:	f000 80a7 	beq.w	8006862 <_svfiprintf_r+0x1c6>
 8006714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006716:	445a      	add	r2, fp
 8006718:	9209      	str	r2, [sp, #36]	@ 0x24
 800671a:	f89a 3000 	ldrb.w	r3, [sl]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 809f 	beq.w	8006862 <_svfiprintf_r+0x1c6>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672e:	f10a 0a01 	add.w	sl, sl, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800673a:	931a      	str	r3, [sp, #104]	@ 0x68
 800673c:	4654      	mov	r4, sl
 800673e:	2205      	movs	r2, #5
 8006740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006744:	484e      	ldr	r0, [pc, #312]	@ (8006880 <_svfiprintf_r+0x1e4>)
 8006746:	f7f9 fd63 	bl	8000210 <memchr>
 800674a:	9a04      	ldr	r2, [sp, #16]
 800674c:	b9d8      	cbnz	r0, 8006786 <_svfiprintf_r+0xea>
 800674e:	06d0      	lsls	r0, r2, #27
 8006750:	bf44      	itt	mi
 8006752:	2320      	movmi	r3, #32
 8006754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006758:	0711      	lsls	r1, r2, #28
 800675a:	bf44      	itt	mi
 800675c:	232b      	movmi	r3, #43	@ 0x2b
 800675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b2a      	cmp	r3, #42	@ 0x2a
 8006768:	d015      	beq.n	8006796 <_svfiprintf_r+0xfa>
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4654      	mov	r4, sl
 800676e:	2000      	movs	r0, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4621      	mov	r1, r4
 8006776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677a:	3b30      	subs	r3, #48	@ 0x30
 800677c:	2b09      	cmp	r3, #9
 800677e:	d94b      	bls.n	8006818 <_svfiprintf_r+0x17c>
 8006780:	b1b0      	cbz	r0, 80067b0 <_svfiprintf_r+0x114>
 8006782:	9207      	str	r2, [sp, #28]
 8006784:	e014      	b.n	80067b0 <_svfiprintf_r+0x114>
 8006786:	eba0 0308 	sub.w	r3, r0, r8
 800678a:	fa09 f303 	lsl.w	r3, r9, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	46a2      	mov	sl, r4
 8006794:	e7d2      	b.n	800673c <_svfiprintf_r+0xa0>
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbb      	ittet	lt
 80067a2:	425b      	neglt	r3, r3
 80067a4:	f042 0202 	orrlt.w	r2, r2, #2
 80067a8:	9307      	strge	r3, [sp, #28]
 80067aa:	9307      	strlt	r3, [sp, #28]
 80067ac:	bfb8      	it	lt
 80067ae:	9204      	strlt	r2, [sp, #16]
 80067b0:	7823      	ldrb	r3, [r4, #0]
 80067b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80067b4:	d10a      	bne.n	80067cc <_svfiprintf_r+0x130>
 80067b6:	7863      	ldrb	r3, [r4, #1]
 80067b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067ba:	d132      	bne.n	8006822 <_svfiprintf_r+0x186>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067c8:	3402      	adds	r4, #2
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006890 <_svfiprintf_r+0x1f4>
 80067d0:	7821      	ldrb	r1, [r4, #0]
 80067d2:	2203      	movs	r2, #3
 80067d4:	4650      	mov	r0, sl
 80067d6:	f7f9 fd1b 	bl	8000210 <memchr>
 80067da:	b138      	cbz	r0, 80067ec <_svfiprintf_r+0x150>
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	eba0 000a 	sub.w	r0, r0, sl
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	4082      	lsls	r2, r0
 80067e6:	4313      	orrs	r3, r2
 80067e8:	3401      	adds	r4, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f0:	4824      	ldr	r0, [pc, #144]	@ (8006884 <_svfiprintf_r+0x1e8>)
 80067f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067f6:	2206      	movs	r2, #6
 80067f8:	f7f9 fd0a 	bl	8000210 <memchr>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d036      	beq.n	800686e <_svfiprintf_r+0x1d2>
 8006800:	4b21      	ldr	r3, [pc, #132]	@ (8006888 <_svfiprintf_r+0x1ec>)
 8006802:	bb1b      	cbnz	r3, 800684c <_svfiprintf_r+0x1b0>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	3307      	adds	r3, #7
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	3308      	adds	r3, #8
 800680e:	9303      	str	r3, [sp, #12]
 8006810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006812:	4433      	add	r3, r6
 8006814:	9309      	str	r3, [sp, #36]	@ 0x24
 8006816:	e76a      	b.n	80066ee <_svfiprintf_r+0x52>
 8006818:	fb0c 3202 	mla	r2, ip, r2, r3
 800681c:	460c      	mov	r4, r1
 800681e:	2001      	movs	r0, #1
 8006820:	e7a8      	b.n	8006774 <_svfiprintf_r+0xd8>
 8006822:	2300      	movs	r3, #0
 8006824:	3401      	adds	r4, #1
 8006826:	9305      	str	r3, [sp, #20]
 8006828:	4619      	mov	r1, r3
 800682a:	f04f 0c0a 	mov.w	ip, #10
 800682e:	4620      	mov	r0, r4
 8006830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006834:	3a30      	subs	r2, #48	@ 0x30
 8006836:	2a09      	cmp	r2, #9
 8006838:	d903      	bls.n	8006842 <_svfiprintf_r+0x1a6>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0c6      	beq.n	80067cc <_svfiprintf_r+0x130>
 800683e:	9105      	str	r1, [sp, #20]
 8006840:	e7c4      	b.n	80067cc <_svfiprintf_r+0x130>
 8006842:	fb0c 2101 	mla	r1, ip, r1, r2
 8006846:	4604      	mov	r4, r0
 8006848:	2301      	movs	r3, #1
 800684a:	e7f0      	b.n	800682e <_svfiprintf_r+0x192>
 800684c:	ab03      	add	r3, sp, #12
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	462a      	mov	r2, r5
 8006852:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <_svfiprintf_r+0x1f0>)
 8006854:	a904      	add	r1, sp, #16
 8006856:	4638      	mov	r0, r7
 8006858:	f3af 8000 	nop.w
 800685c:	1c42      	adds	r2, r0, #1
 800685e:	4606      	mov	r6, r0
 8006860:	d1d6      	bne.n	8006810 <_svfiprintf_r+0x174>
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	065b      	lsls	r3, r3, #25
 8006866:	f53f af2d 	bmi.w	80066c4 <_svfiprintf_r+0x28>
 800686a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800686c:	e72c      	b.n	80066c8 <_svfiprintf_r+0x2c>
 800686e:	ab03      	add	r3, sp, #12
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	462a      	mov	r2, r5
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <_svfiprintf_r+0x1f0>)
 8006876:	a904      	add	r1, sp, #16
 8006878:	4638      	mov	r0, r7
 800687a:	f000 f879 	bl	8006970 <_printf_i>
 800687e:	e7ed      	b.n	800685c <_svfiprintf_r+0x1c0>
 8006880:	08006dc8 	.word	0x08006dc8
 8006884:	08006dd2 	.word	0x08006dd2
 8006888:	00000000 	.word	0x00000000
 800688c:	080065e5 	.word	0x080065e5
 8006890:	08006dce 	.word	0x08006dce

08006894 <_printf_common>:
 8006894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	4616      	mov	r6, r2
 800689a:	4698      	mov	r8, r3
 800689c:	688a      	ldr	r2, [r1, #8]
 800689e:	690b      	ldr	r3, [r1, #16]
 80068a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	bfb8      	it	lt
 80068a8:	4613      	movlt	r3, r2
 80068aa:	6033      	str	r3, [r6, #0]
 80068ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068b0:	4607      	mov	r7, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	b10a      	cbz	r2, 80068ba <_printf_common+0x26>
 80068b6:	3301      	adds	r3, #1
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	0699      	lsls	r1, r3, #26
 80068be:	bf42      	ittt	mi
 80068c0:	6833      	ldrmi	r3, [r6, #0]
 80068c2:	3302      	addmi	r3, #2
 80068c4:	6033      	strmi	r3, [r6, #0]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	f015 0506 	ands.w	r5, r5, #6
 80068cc:	d106      	bne.n	80068dc <_printf_common+0x48>
 80068ce:	f104 0a19 	add.w	sl, r4, #25
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	6832      	ldr	r2, [r6, #0]
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	42ab      	cmp	r3, r5
 80068da:	dc26      	bgt.n	800692a <_printf_common+0x96>
 80068dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	3b00      	subs	r3, #0
 80068e4:	bf18      	it	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	0692      	lsls	r2, r2, #26
 80068ea:	d42b      	bmi.n	8006944 <_printf_common+0xb0>
 80068ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068f0:	4641      	mov	r1, r8
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c8      	blx	r9
 80068f6:	3001      	adds	r0, #1
 80068f8:	d01e      	beq.n	8006938 <_printf_common+0xa4>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	6922      	ldr	r2, [r4, #16]
 80068fe:	f003 0306 	and.w	r3, r3, #6
 8006902:	2b04      	cmp	r3, #4
 8006904:	bf02      	ittt	eq
 8006906:	68e5      	ldreq	r5, [r4, #12]
 8006908:	6833      	ldreq	r3, [r6, #0]
 800690a:	1aed      	subeq	r5, r5, r3
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	bf0c      	ite	eq
 8006910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006914:	2500      	movne	r5, #0
 8006916:	4293      	cmp	r3, r2
 8006918:	bfc4      	itt	gt
 800691a:	1a9b      	subgt	r3, r3, r2
 800691c:	18ed      	addgt	r5, r5, r3
 800691e:	2600      	movs	r6, #0
 8006920:	341a      	adds	r4, #26
 8006922:	42b5      	cmp	r5, r6
 8006924:	d11a      	bne.n	800695c <_printf_common+0xc8>
 8006926:	2000      	movs	r0, #0
 8006928:	e008      	b.n	800693c <_printf_common+0xa8>
 800692a:	2301      	movs	r3, #1
 800692c:	4652      	mov	r2, sl
 800692e:	4641      	mov	r1, r8
 8006930:	4638      	mov	r0, r7
 8006932:	47c8      	blx	r9
 8006934:	3001      	adds	r0, #1
 8006936:	d103      	bne.n	8006940 <_printf_common+0xac>
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006940:	3501      	adds	r5, #1
 8006942:	e7c6      	b.n	80068d2 <_printf_common+0x3e>
 8006944:	18e1      	adds	r1, r4, r3
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	2030      	movs	r0, #48	@ 0x30
 800694a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800694e:	4422      	add	r2, r4
 8006950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006958:	3302      	adds	r3, #2
 800695a:	e7c7      	b.n	80068ec <_printf_common+0x58>
 800695c:	2301      	movs	r3, #1
 800695e:	4622      	mov	r2, r4
 8006960:	4641      	mov	r1, r8
 8006962:	4638      	mov	r0, r7
 8006964:	47c8      	blx	r9
 8006966:	3001      	adds	r0, #1
 8006968:	d0e6      	beq.n	8006938 <_printf_common+0xa4>
 800696a:	3601      	adds	r6, #1
 800696c:	e7d9      	b.n	8006922 <_printf_common+0x8e>
	...

08006970 <_printf_i>:
 8006970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	7e0f      	ldrb	r7, [r1, #24]
 8006976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006978:	2f78      	cmp	r7, #120	@ 0x78
 800697a:	4691      	mov	r9, r2
 800697c:	4680      	mov	r8, r0
 800697e:	460c      	mov	r4, r1
 8006980:	469a      	mov	sl, r3
 8006982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006986:	d807      	bhi.n	8006998 <_printf_i+0x28>
 8006988:	2f62      	cmp	r7, #98	@ 0x62
 800698a:	d80a      	bhi.n	80069a2 <_printf_i+0x32>
 800698c:	2f00      	cmp	r7, #0
 800698e:	f000 80d1 	beq.w	8006b34 <_printf_i+0x1c4>
 8006992:	2f58      	cmp	r7, #88	@ 0x58
 8006994:	f000 80b8 	beq.w	8006b08 <_printf_i+0x198>
 8006998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800699c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069a0:	e03a      	b.n	8006a18 <_printf_i+0xa8>
 80069a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069a6:	2b15      	cmp	r3, #21
 80069a8:	d8f6      	bhi.n	8006998 <_printf_i+0x28>
 80069aa:	a101      	add	r1, pc, #4	@ (adr r1, 80069b0 <_printf_i+0x40>)
 80069ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b0:	08006a09 	.word	0x08006a09
 80069b4:	08006a1d 	.word	0x08006a1d
 80069b8:	08006999 	.word	0x08006999
 80069bc:	08006999 	.word	0x08006999
 80069c0:	08006999 	.word	0x08006999
 80069c4:	08006999 	.word	0x08006999
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006999 	.word	0x08006999
 80069d0:	08006999 	.word	0x08006999
 80069d4:	08006999 	.word	0x08006999
 80069d8:	08006999 	.word	0x08006999
 80069dc:	08006b1b 	.word	0x08006b1b
 80069e0:	08006a47 	.word	0x08006a47
 80069e4:	08006ad5 	.word	0x08006ad5
 80069e8:	08006999 	.word	0x08006999
 80069ec:	08006999 	.word	0x08006999
 80069f0:	08006b3d 	.word	0x08006b3d
 80069f4:	08006999 	.word	0x08006999
 80069f8:	08006a47 	.word	0x08006a47
 80069fc:	08006999 	.word	0x08006999
 8006a00:	08006999 	.word	0x08006999
 8006a04:	08006add 	.word	0x08006add
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6032      	str	r2, [r6, #0]
 8006a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e09c      	b.n	8006b56 <_printf_i+0x1e6>
 8006a1c:	6833      	ldr	r3, [r6, #0]
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	1d19      	adds	r1, r3, #4
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	0606      	lsls	r6, r0, #24
 8006a26:	d501      	bpl.n	8006a2c <_printf_i+0xbc>
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	e003      	b.n	8006a34 <_printf_i+0xc4>
 8006a2c:	0645      	lsls	r5, r0, #25
 8006a2e:	d5fb      	bpl.n	8006a28 <_printf_i+0xb8>
 8006a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	da03      	bge.n	8006a40 <_printf_i+0xd0>
 8006a38:	232d      	movs	r3, #45	@ 0x2d
 8006a3a:	426d      	negs	r5, r5
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a40:	4858      	ldr	r0, [pc, #352]	@ (8006ba4 <_printf_i+0x234>)
 8006a42:	230a      	movs	r3, #10
 8006a44:	e011      	b.n	8006a6a <_printf_i+0xfa>
 8006a46:	6821      	ldr	r1, [r4, #0]
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	0608      	lsls	r0, r1, #24
 8006a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a50:	d402      	bmi.n	8006a58 <_printf_i+0xe8>
 8006a52:	0649      	lsls	r1, r1, #25
 8006a54:	bf48      	it	mi
 8006a56:	b2ad      	uxthmi	r5, r5
 8006a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a5a:	4852      	ldr	r0, [pc, #328]	@ (8006ba4 <_printf_i+0x234>)
 8006a5c:	6033      	str	r3, [r6, #0]
 8006a5e:	bf14      	ite	ne
 8006a60:	230a      	movne	r3, #10
 8006a62:	2308      	moveq	r3, #8
 8006a64:	2100      	movs	r1, #0
 8006a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a6a:	6866      	ldr	r6, [r4, #4]
 8006a6c:	60a6      	str	r6, [r4, #8]
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	db05      	blt.n	8006a7e <_printf_i+0x10e>
 8006a72:	6821      	ldr	r1, [r4, #0]
 8006a74:	432e      	orrs	r6, r5
 8006a76:	f021 0104 	bic.w	r1, r1, #4
 8006a7a:	6021      	str	r1, [r4, #0]
 8006a7c:	d04b      	beq.n	8006b16 <_printf_i+0x1a6>
 8006a7e:	4616      	mov	r6, r2
 8006a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a84:	fb03 5711 	mls	r7, r3, r1, r5
 8006a88:	5dc7      	ldrb	r7, [r0, r7]
 8006a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a8e:	462f      	mov	r7, r5
 8006a90:	42bb      	cmp	r3, r7
 8006a92:	460d      	mov	r5, r1
 8006a94:	d9f4      	bls.n	8006a80 <_printf_i+0x110>
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d10b      	bne.n	8006ab2 <_printf_i+0x142>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	07df      	lsls	r7, r3, #31
 8006a9e:	d508      	bpl.n	8006ab2 <_printf_i+0x142>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	6861      	ldr	r1, [r4, #4]
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	bfde      	ittt	le
 8006aa8:	2330      	movle	r3, #48	@ 0x30
 8006aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ab2:	1b92      	subs	r2, r2, r6
 8006ab4:	6122      	str	r2, [r4, #16]
 8006ab6:	f8cd a000 	str.w	sl, [sp]
 8006aba:	464b      	mov	r3, r9
 8006abc:	aa03      	add	r2, sp, #12
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	f7ff fee7 	bl	8006894 <_printf_common>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d14a      	bne.n	8006b60 <_printf_i+0x1f0>
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	b004      	add	sp, #16
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	4832      	ldr	r0, [pc, #200]	@ (8006ba8 <_printf_i+0x238>)
 8006ade:	2778      	movs	r7, #120	@ 0x78
 8006ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	6831      	ldr	r1, [r6, #0]
 8006ae8:	061f      	lsls	r7, r3, #24
 8006aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aee:	d402      	bmi.n	8006af6 <_printf_i+0x186>
 8006af0:	065f      	lsls	r7, r3, #25
 8006af2:	bf48      	it	mi
 8006af4:	b2ad      	uxthmi	r5, r5
 8006af6:	6031      	str	r1, [r6, #0]
 8006af8:	07d9      	lsls	r1, r3, #31
 8006afa:	bf44      	itt	mi
 8006afc:	f043 0320 	orrmi.w	r3, r3, #32
 8006b00:	6023      	strmi	r3, [r4, #0]
 8006b02:	b11d      	cbz	r5, 8006b0c <_printf_i+0x19c>
 8006b04:	2310      	movs	r3, #16
 8006b06:	e7ad      	b.n	8006a64 <_printf_i+0xf4>
 8006b08:	4826      	ldr	r0, [pc, #152]	@ (8006ba4 <_printf_i+0x234>)
 8006b0a:	e7e9      	b.n	8006ae0 <_printf_i+0x170>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	e7f6      	b.n	8006b04 <_printf_i+0x194>
 8006b16:	4616      	mov	r6, r2
 8006b18:	e7bd      	b.n	8006a96 <_printf_i+0x126>
 8006b1a:	6833      	ldr	r3, [r6, #0]
 8006b1c:	6825      	ldr	r5, [r4, #0]
 8006b1e:	6961      	ldr	r1, [r4, #20]
 8006b20:	1d18      	adds	r0, r3, #4
 8006b22:	6030      	str	r0, [r6, #0]
 8006b24:	062e      	lsls	r6, r5, #24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	d501      	bpl.n	8006b2e <_printf_i+0x1be>
 8006b2a:	6019      	str	r1, [r3, #0]
 8006b2c:	e002      	b.n	8006b34 <_printf_i+0x1c4>
 8006b2e:	0668      	lsls	r0, r5, #25
 8006b30:	d5fb      	bpl.n	8006b2a <_printf_i+0x1ba>
 8006b32:	8019      	strh	r1, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	4616      	mov	r6, r2
 8006b3a:	e7bc      	b.n	8006ab6 <_printf_i+0x146>
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	6032      	str	r2, [r6, #0]
 8006b42:	681e      	ldr	r6, [r3, #0]
 8006b44:	6862      	ldr	r2, [r4, #4]
 8006b46:	2100      	movs	r1, #0
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f7f9 fb61 	bl	8000210 <memchr>
 8006b4e:	b108      	cbz	r0, 8006b54 <_printf_i+0x1e4>
 8006b50:	1b80      	subs	r0, r0, r6
 8006b52:	6060      	str	r0, [r4, #4]
 8006b54:	6863      	ldr	r3, [r4, #4]
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5e:	e7aa      	b.n	8006ab6 <_printf_i+0x146>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	4632      	mov	r2, r6
 8006b64:	4649      	mov	r1, r9
 8006b66:	4640      	mov	r0, r8
 8006b68:	47d0      	blx	sl
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d0ad      	beq.n	8006aca <_printf_i+0x15a>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	079b      	lsls	r3, r3, #30
 8006b72:	d413      	bmi.n	8006b9c <_printf_i+0x22c>
 8006b74:	68e0      	ldr	r0, [r4, #12]
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	4298      	cmp	r0, r3
 8006b7a:	bfb8      	it	lt
 8006b7c:	4618      	movlt	r0, r3
 8006b7e:	e7a6      	b.n	8006ace <_printf_i+0x15e>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4632      	mov	r2, r6
 8006b84:	4649      	mov	r1, r9
 8006b86:	4640      	mov	r0, r8
 8006b88:	47d0      	blx	sl
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d09d      	beq.n	8006aca <_printf_i+0x15a>
 8006b8e:	3501      	adds	r5, #1
 8006b90:	68e3      	ldr	r3, [r4, #12]
 8006b92:	9903      	ldr	r1, [sp, #12]
 8006b94:	1a5b      	subs	r3, r3, r1
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	dcf2      	bgt.n	8006b80 <_printf_i+0x210>
 8006b9a:	e7eb      	b.n	8006b74 <_printf_i+0x204>
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	f104 0619 	add.w	r6, r4, #25
 8006ba2:	e7f5      	b.n	8006b90 <_printf_i+0x220>
 8006ba4:	08006dd9 	.word	0x08006dd9
 8006ba8:	08006dea 	.word	0x08006dea

08006bac <memmove>:
 8006bac:	4288      	cmp	r0, r1
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	eb01 0402 	add.w	r4, r1, r2
 8006bb4:	d902      	bls.n	8006bbc <memmove+0x10>
 8006bb6:	4284      	cmp	r4, r0
 8006bb8:	4623      	mov	r3, r4
 8006bba:	d807      	bhi.n	8006bcc <memmove+0x20>
 8006bbc:	1e43      	subs	r3, r0, #1
 8006bbe:	42a1      	cmp	r1, r4
 8006bc0:	d008      	beq.n	8006bd4 <memmove+0x28>
 8006bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bca:	e7f8      	b.n	8006bbe <memmove+0x12>
 8006bcc:	4402      	add	r2, r0
 8006bce:	4601      	mov	r1, r0
 8006bd0:	428a      	cmp	r2, r1
 8006bd2:	d100      	bne.n	8006bd6 <memmove+0x2a>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bde:	e7f7      	b.n	8006bd0 <memmove+0x24>

08006be0 <_sbrk_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d06      	ldr	r5, [pc, #24]	@ (8006bfc <_sbrk_r+0x1c>)
 8006be4:	2300      	movs	r3, #0
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fa f85a 	bl	8000ca4 <_sbrk>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_sbrk_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_sbrk_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20004c78 	.word	0x20004c78

08006c00 <_realloc_r>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4607      	mov	r7, r0
 8006c06:	4614      	mov	r4, r2
 8006c08:	460d      	mov	r5, r1
 8006c0a:	b921      	cbnz	r1, 8006c16 <_realloc_r+0x16>
 8006c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	4611      	mov	r1, r2
 8006c12:	f7ff bc5b 	b.w	80064cc <_malloc_r>
 8006c16:	b92a      	cbnz	r2, 8006c24 <_realloc_r+0x24>
 8006c18:	f7ff fbec 	bl	80063f4 <_free_r>
 8006c1c:	4625      	mov	r5, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	f000 f81a 	bl	8006c5c <_malloc_usable_size_r>
 8006c28:	4284      	cmp	r4, r0
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	d802      	bhi.n	8006c34 <_realloc_r+0x34>
 8006c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c32:	d8f4      	bhi.n	8006c1e <_realloc_r+0x1e>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4638      	mov	r0, r7
 8006c38:	f7ff fc48 	bl	80064cc <_malloc_r>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	b908      	cbnz	r0, 8006c44 <_realloc_r+0x44>
 8006c40:	4645      	mov	r5, r8
 8006c42:	e7ec      	b.n	8006c1e <_realloc_r+0x1e>
 8006c44:	42b4      	cmp	r4, r6
 8006c46:	4622      	mov	r2, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	bf28      	it	cs
 8006c4c:	4632      	movcs	r2, r6
 8006c4e:	f7ff fbc3 	bl	80063d8 <memcpy>
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff fbcd 	bl	80063f4 <_free_r>
 8006c5a:	e7f1      	b.n	8006c40 <_realloc_r+0x40>

08006c5c <_malloc_usable_size_r>:
 8006c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c60:	1f18      	subs	r0, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfbc      	itt	lt
 8006c66:	580b      	ldrlt	r3, [r1, r0]
 8006c68:	18c0      	addlt	r0, r0, r3
 8006c6a:	4770      	bx	lr

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
